'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _setupBase = require('../../setup-base');

var _setupBase2 = _interopRequireDefault(_setupBase);

var _helpersWebview = require('../../helpers/webview');

var _helpersSession = require('../../helpers/session');

describe('safari - webview - alerts @skip-real-device', function () {
  var _this = this;

  this.timeout(_helpersSession.MOCHA_SAFARI_TIMEOUT);

  var driver = (0, _setupBase2['default'])(this, _desired2['default'], { noReset: true }).driver;
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpersWebview.loadWebView)(_desired2['default'], driver));

        case 2:
          return context$2$0.abrupt('return', context$2$0.sent);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should accept alert', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'alert1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.postAcceptAlert());

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.title());

        case 9:
          context$2$0.sent.should.include('I am a page title');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should dismiss alert', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'alert1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.postDismissAlert());

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.title());

        case 9:
          context$2$0.sent.should.include('I am a page title');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get text of alert', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'alert1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.getAlertText());

        case 7:
          context$2$0.sent.should.include('I am an alert');
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(driver.postDismissAlert());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should not get text of alert that closed', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'alert1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.postAcceptAlert());

        case 7:
          return context$2$0.abrupt('return', driver.getAlertText().should.be.rejectedWith(/An attempt was made to operate on a modal dialog when one was not open/));

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should set text of prompt', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'prompt1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.setAlertText('yes I do!'));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.postAcceptAlert());

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'promptVal'));

        case 11:
          el = context$2$0.sent;
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(driver.getAttribute('value', el));

        case 14:
          context$2$0.sent.toLowerCase().should.equal('yes i do!');

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should fail to set text of alert', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('id', 'alert1'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el));

        case 5:
          return context$2$0.abrupt('return', driver.setAlertText('yes I do!').should.be.rejectedWith(/Tried to set text of an alert that wasn't a prompt/));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// TODO: avoiding flaky test case where value is 'yes I dO'.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L2FsZXJ0cy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7dUJBQW9CLFdBQVc7Ozs7eUJBQ2Isa0JBQWtCOzs7OzhCQUNSLHVCQUF1Qjs7OEJBQ2QsdUJBQXVCOztBQUc1RCxRQUFRLENBQUMsNkNBQTZDLEVBQUUsWUFBWTs7O0FBQ2xFLE1BQUksQ0FBQyxPQUFPLHNDQUFzQixDQUFDOztBQUVuQyxNQUFNLE1BQU0sR0FBRyw0QkFBTSxJQUFJLHdCQUFXLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzVELFlBQVUsQ0FBQzs7Ozs7MkNBQWtCLHVEQUFxQixNQUFNLENBQUM7Ozs7Ozs7Ozs7R0FBQSxDQUFDLENBQUM7O0FBRTNELElBQUUsQ0FBQyxxQkFBcUIsRUFBRTtRQUNwQixFQUFFOzs7OzsyQ0FBUyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7OztBQUE3QyxZQUFFOzsyQ0FDQSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzs7OzsyQ0FDaEIsTUFBTSxDQUFDLGVBQWUsRUFBRTs7OzsyQ0FDdkIsTUFBTSxDQUFDLEtBQUssRUFBRTs7OzJCQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1COzs7Ozs7O0dBQzFELENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsc0JBQXNCLEVBQUU7UUFDckIsRUFBRTs7Ozs7MkNBQVMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDOzs7QUFBN0MsWUFBRTs7MkNBQ0EsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Ozs7MkNBQ2hCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTs7OzsyQ0FDeEIsTUFBTSxDQUFDLEtBQUssRUFBRTs7OzJCQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1COzs7Ozs7O0dBQzFELENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDekIsRUFBRTs7Ozs7MkNBQVMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDOzs7QUFBN0MsWUFBRTs7MkNBQ0EsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Ozs7MkNBQ2YsTUFBTSxDQUFDLFlBQVksRUFBRTs7OzJCQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZTs7MkNBQ3RELE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTs7Ozs7OztHQUNoQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDBDQUEwQyxFQUFFO1FBQ3pDLEVBQUU7Ozs7OzJDQUFTLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzs7O0FBQTdDLFlBQUU7OzJDQUNBLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDOzs7OzJDQUNoQixNQUFNLENBQUMsZUFBZSxFQUFFOzs7OENBQ3ZCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsd0VBQXdFLENBQUM7Ozs7Ozs7R0FDcEcsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQywyQkFBMkIsRUFBRTtRQUMxQixFQUFFOzs7OzsyQ0FBUyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUM7OztBQUE5QyxZQUFFOzsyQ0FDQSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzs7OzsyQ0FDaEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7Ozs7MkNBQ2hDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7Ozs7MkNBRW5CLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQzs7O0FBQWhELFlBQUU7OzJDQUVLLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQzs7OzJCQUFFLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7Ozs7Ozs7R0FDaEYsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNqQyxFQUFFOzs7OzsyQ0FBUyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7OztBQUE3QyxZQUFFOzsyQ0FDQSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzs7OzhDQUNmLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQ3BDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLG9EQUFvRCxDQUFDOzs7Ozs7O0dBQ2hGLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2UyZS9zYWZhcmkvd2Vidmlldy9hbGVydHMtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVzaXJlZCBmcm9tICcuL2Rlc2lyZWQnO1xuaW1wb3J0IHNldHVwIGZyb20gJy4uLy4uL3NldHVwLWJhc2UnO1xuaW1wb3J0IHsgbG9hZFdlYlZpZXcgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3dlYnZpZXcnO1xuaW1wb3J0IHsgTU9DSEFfU0FGQVJJX1RJTUVPVVQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Nlc3Npb24nO1xuXG5cbmRlc2NyaWJlKCdzYWZhcmkgLSB3ZWJ2aWV3IC0gYWxlcnRzIEBza2lwLXJlYWwtZGV2aWNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnRpbWVvdXQoTU9DSEFfU0FGQVJJX1RJTUVPVVQpO1xuXG4gIGNvbnN0IGRyaXZlciA9IHNldHVwKHRoaXMsIGRlc2lyZWQsIHtub1Jlc2V0OiB0cnVlfSkuZHJpdmVyO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IGF3YWl0IGxvYWRXZWJWaWV3KGRlc2lyZWQsIGRyaXZlcikpO1xuXG4gIGl0KCdzaG91bGQgYWNjZXB0IGFsZXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnaWQnLCAnYWxlcnQxJyk7XG4gICAgYXdhaXQgZHJpdmVyLmNsaWNrKGVsKTtcbiAgICBhd2FpdCBkcml2ZXIucG9zdEFjY2VwdEFsZXJ0KCk7XG4gICAgKGF3YWl0IGRyaXZlci50aXRsZSgpKS5zaG91bGQuaW5jbHVkZSgnSSBhbSBhIHBhZ2UgdGl0bGUnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNtaXNzIGFsZXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnaWQnLCAnYWxlcnQxJyk7XG4gICAgYXdhaXQgZHJpdmVyLmNsaWNrKGVsKTtcbiAgICBhd2FpdCBkcml2ZXIucG9zdERpc21pc3NBbGVydCgpO1xuICAgIChhd2FpdCBkcml2ZXIudGl0bGUoKSkuc2hvdWxkLmluY2x1ZGUoJ0kgYW0gYSBwYWdlIHRpdGxlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRleHQgb2YgYWxlcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdpZCcsICdhbGVydDEnKTtcbiAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwpO1xuICAgIChhd2FpdCBkcml2ZXIuZ2V0QWxlcnRUZXh0KCkpLnNob3VsZC5pbmNsdWRlKCdJIGFtIGFuIGFsZXJ0Jyk7XG4gICAgYXdhaXQgZHJpdmVyLnBvc3REaXNtaXNzQWxlcnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgZ2V0IHRleHQgb2YgYWxlcnQgdGhhdCBjbG9zZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdpZCcsICdhbGVydDEnKTtcbiAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwpO1xuICAgIGF3YWl0IGRyaXZlci5wb3N0QWNjZXB0QWxlcnQoKTtcbiAgICByZXR1cm4gZHJpdmVyLmdldEFsZXJ0VGV4dCgpXG4gICAgICAuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBvcGVyYXRlIG9uIGEgbW9kYWwgZGlhbG9nIHdoZW4gb25lIHdhcyBub3Qgb3Blbi8pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNldCB0ZXh0IG9mIHByb21wdCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2lkJywgJ3Byb21wdDEnKTtcbiAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwpO1xuICAgIGF3YWl0IGRyaXZlci5zZXRBbGVydFRleHQoJ3llcyBJIGRvIScpO1xuICAgIGF3YWl0IGRyaXZlci5wb3N0QWNjZXB0QWxlcnQoKTtcblxuICAgIGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdpZCcsICdwcm9tcHRWYWwnKTtcbiAgICAvLyBUT0RPOiBhdm9pZGluZyBmbGFreSB0ZXN0IGNhc2Ugd2hlcmUgdmFsdWUgaXMgJ3llcyBJIGRPJy5cbiAgICAoYXdhaXQgZHJpdmVyLmdldEF0dHJpYnV0ZSgndmFsdWUnLCBlbCkpLnRvTG93ZXJDYXNlKCkuc2hvdWxkLmVxdWFsKCd5ZXMgaSBkbyEnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmYWlsIHRvIHNldCB0ZXh0IG9mIGFsZXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnaWQnLCAnYWxlcnQxJyk7XG4gICAgYXdhaXQgZHJpdmVyLmNsaWNrKGVsKTtcbiAgICByZXR1cm4gZHJpdmVyLnNldEFsZXJ0VGV4dCgneWVzIEkgZG8hJylcbiAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9UcmllZCB0byBzZXQgdGV4dCBvZiBhbiBhbGVydCB0aGF0IHdhc24ndCBhIHByb21wdC8pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLiJ9
