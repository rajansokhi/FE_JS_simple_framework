'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _setupBase = require('../../setup-base');

var _setupBase2 = _interopRequireDefault(_setupBase);

var _helpersSession = require('../../helpers/session');

var pem = _bluebird2['default'].promisifyAll(require('pem'));

describe('When accessing an HTTPS encrypted site in Safari', function () {
  var _this = this;

  this.timeout(_helpersSession.MOCHA_SAFARI_TIMEOUT);

  var sslServer = undefined;

  before(function callee$1$0() {
    var privateKey, keys, pemCertificate;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

        case 2:
          privateKey = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: privateKey.key }));

        case 5:
          keys = context$2$0.sent;
          pemCertificate = keys.certificate;

          sslServer = _https2['default'].createServer({ key: keys.serviceKey, cert: pemCertificate }, function (req, res) {
            res.end('Arbitrary text');
          }).listen(9758);
          _desired2['default'].customSSLCert = pemCertificate;

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  var driver = (0, _setupBase2['default'])(this, _desired2['default'], { noReset: true }).driver;

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!sslServer) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(sslServer.close());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should be able to access it as long the PEM certificate is provided as a capability', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.setUrl('https://localhost:9758'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.getPageSource());

        case 6:
          context$2$0.sent.should.include('Arbitrary text');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// Create an HTTPS server with a random pem certificate
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7dUJBQW9CLFdBQVc7Ozs7d0JBQ2pCLFVBQVU7Ozs7cUJBQ04sT0FBTzs7Ozt5QkFDUCxrQkFBa0I7Ozs7OEJBQ0MsdUJBQXVCOztBQUU1RCxJQUFNLEdBQUcsR0FBRyxzQkFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O0FBRTNDLFFBQVEsQ0FBQyxrREFBa0QsRUFBRSxZQUFZOzs7QUFDdkUsTUFBSSxDQUFDLE9BQU8sc0NBQXNCLENBQUM7O0FBRW5DLE1BQUksU0FBUyxZQUFBLENBQUM7O0FBRWQsUUFBTSxDQUFDO1FBRUQsVUFBVSxFQUNWLElBQUksRUFDSixjQUFjOzs7OzsyQ0FGSyxHQUFHLENBQUMscUJBQXFCLEVBQUU7OztBQUE5QyxvQkFBVTs7MkNBQ0csR0FBRyxDQUFDLHNCQUFzQixDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFDLENBQUM7OztBQUEvRixjQUFJO0FBQ0osd0JBQWMsR0FBRyxJQUFJLENBQUMsV0FBVzs7QUFFckMsbUJBQVMsR0FBRyxtQkFBTSxZQUFZLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFDLEVBQUUsVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFO0FBQy9GLGVBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztXQUMzQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hCLCtCQUFRLGFBQWEsR0FBRyxjQUFjLENBQUM7Ozs7Ozs7R0FDeEMsQ0FBQyxDQUFDOztBQUVILE1BQU0sTUFBTSxHQUFHLDRCQUFNLElBQUksd0JBQVcsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7O0FBRTVELE9BQUssQ0FBQzs7OztlQUNBLFNBQVM7Ozs7OzsyQ0FDTCxTQUFTLENBQUMsS0FBSyxFQUFFOzs7Ozs7O0dBRTFCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMscUZBQXFGLEVBQUU7Ozs7OzJDQUNsRixzQkFBRSxLQUFLLENBQUMsR0FBRyxDQUFDOzs7OzJDQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUM7Ozs7MkNBQ3RDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OzsyQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQjs7Ozs7OztHQUMvRCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvc2FmYXJpL3dlYnZpZXcvc3NsLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgc2V0dXAgZnJvbSAnLi4vLi4vc2V0dXAtYmFzZSc7XG5pbXBvcnQgeyBNT0NIQV9TQUZBUklfVElNRU9VVCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvc2Vzc2lvbic7XG5cbmNvbnN0IHBlbSA9IEIucHJvbWlzaWZ5QWxsKHJlcXVpcmUoJ3BlbScpKTtcblxuZGVzY3JpYmUoJ1doZW4gYWNjZXNzaW5nIGFuIEhUVFBTIGVuY3J5cHRlZCBzaXRlIGluIFNhZmFyaScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1NBRkFSSV9USU1FT1VUKTtcblxuICBsZXQgc3NsU2VydmVyO1xuXG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ3JlYXRlIGFuIEhUVFBTIHNlcnZlciB3aXRoIGEgcmFuZG9tIHBlbSBjZXJ0aWZpY2F0ZVxuICAgIGxldCBwcml2YXRlS2V5ID0gYXdhaXQgcGVtLmNyZWF0ZVByaXZhdGVLZXlBc3luYygpO1xuICAgIGxldCBrZXlzID0gYXdhaXQgcGVtLmNyZWF0ZUNlcnRpZmljYXRlQXN5bmMoe2RheXM6MSwgc2VsZlNpZ25lZDogdHJ1ZSwgc2VydmljZUtleTogcHJpdmF0ZUtleS5rZXl9KTtcbiAgICBsZXQgcGVtQ2VydGlmaWNhdGUgPSBrZXlzLmNlcnRpZmljYXRlO1xuXG4gICAgc3NsU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHtrZXk6IGtleXMuc2VydmljZUtleSwgY2VydDogcGVtQ2VydGlmaWNhdGV9LCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgIHJlcy5lbmQoJ0FyYml0cmFyeSB0ZXh0Jyk7XG4gICAgfSkubGlzdGVuKDk3NTgpO1xuICAgIGRlc2lyZWQuY3VzdG9tU1NMQ2VydCA9IHBlbUNlcnRpZmljYXRlO1xuICB9KTtcblxuICBjb25zdCBkcml2ZXIgPSBzZXR1cCh0aGlzLCBkZXNpcmVkLCB7bm9SZXNldDogdHJ1ZX0pLmRyaXZlcjtcblxuICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNzbFNlcnZlcikge1xuICAgICAgYXdhaXQgc3NsU2VydmVyLmNsb3NlKCk7XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gYWNjZXNzIGl0IGFzIGxvbmcgdGhlIFBFTSBjZXJ0aWZpY2F0ZSBpcyBwcm92aWRlZCBhcyBhIGNhcGFiaWxpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgQi5kZWxheSg1MDApO1xuICAgIGF3YWl0IGRyaXZlci5zZXRVcmwoJ2h0dHBzOi8vbG9jYWxob3N0Ojk3NTgnKTtcbiAgICAoYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKSkuc2hvdWxkLmluY2x1ZGUoJ0FyYml0cmFyeSB0ZXh0Jyk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uIn0=
