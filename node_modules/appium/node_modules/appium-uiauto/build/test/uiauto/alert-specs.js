require('source-map-support').install();

/* globals $, rootPage, alerts */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _base = require('./base');

_base.instrumentsInstanceInit;

describe('alarm', function () {
  var imports = { post: ['uiauto/lib/alerts.js', 'uiauto/lib/status.js', 'uiauto/lib/element-patch/nil-patch.js', 'uiauto/lib/element-patch/helper-patch.js', 'uiauto/lib/mechanic-ext/basics-ext.js', 'uiauto/lib/mechanic-ext/util-ext.js', 'uiauto/lib/mechanic-ext/lookup-ext.js', 'uiauto/lib/mechanic-ext/alert-ext.js', 'uiauto/lib/mechanic-ext/xpath-ext.js'] };

  (0, _base.globalInit)(this, { imports: imports, bootstrap: 'basic' });

  describe('textfields', function () {
    var _this = this;

    var ctx = undefined;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              alerts.configure();
            }));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $('#UICatalog').first().tap();
              $.delay(1000);
            }));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should retrieve alert text and then accept alert', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              rootPage.clickMenuItem('Alert Views');
              $.delay(2000);
              $('#Okay / Cancel').first().tap();
              $.delay(2000);
              var alertText = $.getAlertText();
              $.acceptAlert();
              return alertText;
            }));

          case 2:
            res = context$3$0.sent;

            res.should.include('A Short Title Is Best');
            res.should.include('A message should be a short, complete sentence.');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdWlhdXRvL2FsZXJ0LXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7b0JBRzZELFFBQVE7O0FBRXJFLDhCQUF3Qjs7QUFFeEIsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFZO0FBQzVCLE1BQUksT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQ3BCLHNCQUFzQixFQUN0QixzQkFBc0IsRUFDdEIsdUNBQXVDLEVBQ3ZDLDBDQUEwQyxFQUMxQyx1Q0FBdUMsRUFDdkMscUNBQXFDLEVBQ3JDLHVDQUF1QyxFQUN2QyxzQ0FBc0MsRUFDdEMsc0NBQXNDLENBQ3ZDLEVBQUMsQ0FBQzs7QUFFSCx3QkFBVyxJQUFJLEVBQUUsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDOztBQUd6RCxVQUFRLENBQUMsWUFBWSxFQUFFLFlBQVk7OztBQUNqQyxRQUFJLEdBQUcsWUFBQSxDQUFDOztBQUVSLFVBQU0sQ0FBQzs7Ozs7NkNBQ08sb0NBQXlCOzs7QUFBckMsZUFBRzs7NkNBQ0csR0FBRyxDQUFDLFFBQVEsQ0FDaEIsWUFBWTtBQUNWLG9CQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDcEIsQ0FDRjs7Ozs7OztLQUNGLENBQUMsQ0FBQzs7QUFFSCxhQUFTLENBQUM7Ozs7OzZDQUNGLEdBQUcsQ0FBQyxRQUFRLENBQ2hCLFlBQVk7QUFDVixlQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDOUIsZUFBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNmLENBQ0Y7Ozs7NkNBQ0ssbUJBQVEsR0FBRyxDQUFDOzs7Ozs7O0tBQ25CLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsa0RBQWtELEVBQUU7VUFDakQsR0FBRzs7Ozs7NkNBQVMsR0FBRyxDQUFDLFFBQVEsQ0FDMUIsWUFBWTtBQUNWLHNCQUFRLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RDLGVBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxlQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQyxlQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2Qsa0JBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNqQyxlQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDaEIscUJBQU8sU0FBUyxDQUFDO2FBQ2xCLENBQ0Y7OztBQVZHLGVBQUc7O0FBV1AsZUFBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUM1QyxlQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDOzs7Ozs7O0tBQ3ZFLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VpYXV0by9hbGVydC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuLyogZ2xvYmFscyAkLCByb290UGFnZSwgYWxlcnRzICovXG5cbmltcG9ydCB7IGluc3RydW1lbnRzSW5zdGFuY2VJbml0LCBnbG9iYWxJbml0LCBraWxsQWxsIH0gZnJvbSAnLi9iYXNlJztcblxuaW5zdHJ1bWVudHNJbnN0YW5jZUluaXQ7XG5cbmRlc2NyaWJlKCdhbGFybScsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGltcG9ydHMgPSB7IHBvc3Q6IFtcbiAgICAndWlhdXRvL2xpYi9hbGVydHMuanMnLFxuICAgICd1aWF1dG8vbGliL3N0YXR1cy5qcycsXG4gICAgJ3VpYXV0by9saWIvZWxlbWVudC1wYXRjaC9uaWwtcGF0Y2guanMnLFxuICAgICd1aWF1dG8vbGliL2VsZW1lbnQtcGF0Y2gvaGVscGVyLXBhdGNoLmpzJyxcbiAgICAndWlhdXRvL2xpYi9tZWNoYW5pYy1leHQvYmFzaWNzLWV4dC5qcycsXG4gICAgJ3VpYXV0by9saWIvbWVjaGFuaWMtZXh0L3V0aWwtZXh0LmpzJyxcbiAgICAndWlhdXRvL2xpYi9tZWNoYW5pYy1leHQvbG9va3VwLWV4dC5qcycsXG4gICAgJ3VpYXV0by9saWIvbWVjaGFuaWMtZXh0L2FsZXJ0LWV4dC5qcycsXG4gICAgJ3VpYXV0by9saWIvbWVjaGFuaWMtZXh0L3hwYXRoLWV4dC5qcydcbiAgXX07XG5cbiAgZ2xvYmFsSW5pdCh0aGlzLCB7aW1wb3J0czogaW1wb3J0cywgYm9vdHN0cmFwOiAnYmFzaWMnfSk7XG5cblxuICBkZXNjcmliZSgndGV4dGZpZWxkcycsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY3R4O1xuXG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIGN0eCA9IGF3YWl0IGluc3RydW1lbnRzSW5zdGFuY2VJbml0KCk7XG4gICAgICBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhbGVydHMuY29uZmlndXJlKCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LmV4ZWNGdW5jKFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCgnI1VJQ2F0YWxvZycpLmZpcnN0KCkudGFwKCk7XG4gICAgICAgICAgJC5kZWxheSgxMDAwKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGF3YWl0IGtpbGxBbGwoY3R4KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0cmlldmUgYWxlcnQgdGV4dCBhbmQgdGhlbiBhY2NlcHQgYWxlcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgY3R4LmV4ZWNGdW5jKFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcm9vdFBhZ2UuY2xpY2tNZW51SXRlbSgnQWxlcnQgVmlld3MnKTtcbiAgICAgICAgICAkLmRlbGF5KDIwMDApO1xuICAgICAgICAgICQoJyNPa2F5IC8gQ2FuY2VsJykuZmlyc3QoKS50YXAoKTtcbiAgICAgICAgICAkLmRlbGF5KDIwMDApO1xuICAgICAgICAgIHZhciBhbGVydFRleHQgPSAkLmdldEFsZXJ0VGV4dCgpO1xuICAgICAgICAgICQuYWNjZXB0QWxlcnQoKTtcbiAgICAgICAgICByZXR1cm4gYWxlcnRUZXh0O1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmVzLnNob3VsZC5pbmNsdWRlKCdBIFNob3J0IFRpdGxlIElzIEJlc3QnKTtcbiAgICAgIHJlcy5zaG91bGQuaW5jbHVkZSgnQSBtZXNzYWdlIHNob3VsZCBiZSBhIHNob3J0LCBjb21wbGV0ZSBzZW50ZW5jZS4nKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
