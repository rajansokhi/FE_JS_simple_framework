'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url2 = require('url');

var _url3 = _interopRequireDefault(_url2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _noSessionProxy = require("./no-session-proxy");

var _utilsJs = require('./utils.js');

var _webdriveragentUtils = require('./webdriveragent-utils');

var xcodeLog = _appiumSupport.logger.getLogger('Xcode');
var iproxyLog = _appiumSupport.logger.getLogger('iProxy');

var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent');
var WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
var DEFAULT_SIGNING_ID = "iPhone Developer";
var WDA_LAUNCH_TIMEOUT = 60 * 1000;
var IPROXY_TIMEOUT = 5000;
var WDA_AGENT_PORT = 8100;
var WDA_BASE_URL = 'http://localhost';
var BUILD_TEST_DELAY = 1000;

var WebDriverAgent = (function () {

  // agentPath (optional): Path to WebdriverAgent Executable (inside WebDriverAgent.app)

  function WebDriverAgent(xcodeVersion) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, WebDriverAgent);

    this.xcodeVersion = xcodeVersion;

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.setWDAPaths(args.bootstrapPath, args.agentPath);

    this.wdaLocalPort = args.wdaLocalPort;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;

    this.prebuildWDA = args.prebuildWDA;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.useSimpleBuildTest = args.useSimpleBuildTest;

    this.webDriverAgentUrl = args.webDriverAgentUrl;

    this.updatedWDABundleId = args.updatedWDABundleId;

    this.expectIProxyErrors = true;

    this.wdaLaunchTimeout = args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;

    this.useCarthageSsl = _lodash2['default'].isBoolean(args.useCarthageSsl) && args.useCarthageSsl;
  }

  _createClass(WebDriverAgent, [{
    key: 'setWDAPaths',
    value: function setWDAPaths(bootstrapPath, agentPath) {
      // allow the user to specify a place for WDA. This is undocumented and
      // only here for the purposes of testing development of WDA
      this.bootstrapPath = bootstrapPath || BOOTSTRAP_PATH;
      _logger2['default'].info('Using WDA path: \'' + this.bootstrapPath + '\'');

      // for backward compatibility we need to be able to specify agentPath too
      this.agentPath = agentPath || _path2['default'].resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
      _logger2['default'].info('Using WDA agent: \'' + this.agentPath + '\'');
    }
  }, {
    key: 'uninstall',
    value: function uninstall() {
      return _regeneratorRuntime.async(function uninstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Removing WDA application from device');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.device.removeApp(WDA_BUNDLE_ID));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launch',
    value: function launch(sessionId) {
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.webDriverAgentUrl) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].info('Using provided WebdriverAgent at \'' + this.webDriverAgentUrl + '\'');
            this.url = this.webDriverAgentUrl;
            this.setupProxies(sessionId);
            return context$2$0.abrupt('return', this.webDriverAgentUrl);

          case 5:

            _logger2['default'].info('Launching WebDriverAgent on the device');

            this.setupProxies(sessionId);

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 9:
            if (context$2$0.sent) {
              context$2$0.next = 11;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 11:
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.checkForDependencies)(this.bootstrapPath, this.useCarthageSsl));

          case 13:
            if (!(this.realDevice && this.updatedWDABundleId)) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.updateProjectFile)(this.agentPath, this.updatedWDABundleId));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.killHangingProcesses());

          case 18:
            if (!(this.xcodeVersion.major === 7 || this.xcodeVersion.major === 8 && this.xcodeVersion.minor === 0)) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Using Xcode ' + this.xcodeVersion.versionString + ', so fixing WDA codebase');
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.fixForXcode7)(this.bootstrapPath, true));

          case 22:
            if (!this.prebuildWDA) {
              context$2$0.next = 37;
              break;
            }

            if (!(this.xcodeVersion.major === 7)) {
              context$2$0.next = 27;
              break;
            }

            _logger2['default'].debug('Capability \'prebuildWDA\' set, but on xcode version ' + this.xcodeVersion.versionString + ' so skipping');
            context$2$0.next = 37;
            break;

          case 27:
            // first do a build phase
            _logger2['default'].debug('Pre-building WDA before launching test');
            this.usePrebuiltWDA = true;
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess(true));

          case 31:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.startXcodebuild(true));

          case 34:
            this.xcodebuild = null;
            // pause a moment
            context$2$0.next = 37;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(BUILD_TEST_DELAY));

          case 37:
            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess());

          case 39:
            this.xcodebuild = context$2$0.sent;

            if (!this.realDevice) {
              context$2$0.next = 44;
              break;
            }

            this.iproxy = this.createiProxySubProcess(this.url.port, WDA_AGENT_PORT);
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(this.startiproxy());

          case 44:
            context$2$0.next = 46;
            return _regeneratorRuntime.awrap(this.startXcodebuild());

          case 46:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 47:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxies',
    value: function setupProxies(sessionId) {
      var proxyOpts = {
        server: this.url.hostname,
        port: this.url.port,
        base: '',
        timeout: this.wdaConnectionTimeout
      };

      this.jwproxy = new _appiumBaseDriver.JWProxy(proxyOpts);
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);

      this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
      this.noSessionProxyReqRes = this.noSessionProxy.proxyReqRes.bind(this.noSessionProxy);
    }
  }, {
    key: 'getXcodeBuildCommand',
    value: function getXcodeBuildCommand() {
      var _args;

      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var cmd = 'xcodebuild';
      var args = undefined;

      // figure out the targets for xcodebuild
      if (this.xcodeVersion.major < 8) {
        if (this.usePrebuiltWDA) {
          var msg = '\'usePrebuiltWDA\' set, but on Xcode ' + ('\'' + this.xcodeVersion.versionString + '\', so skipping, as it ') + 'needs a version >= 8';
          _logger2['default'].warn(msg);
        }
        args = ['build', 'test'];
      } else {
        var _ref = this.useSimpleBuildTest ? ['build', 'test'] : ['build-for-testing', 'test-without-building'];

        var _ref2 = _slicedToArray(_ref, 2);

        var buildCmd = _ref2[0];
        var testCmd = _ref2[1];

        if (buildOnly) {
          args = [buildCmd];
        } else if (this.usePrebuiltWDA) {
          args = [testCmd];
        } else {
          args = [buildCmd, testCmd];
        }
      }

      // add the rest of the arguments for the xcodebuild command
      var genericArgs = ['-project', this.agentPath, '-scheme', 'WebDriverAgentRunner', '-destination', 'id=' + this.device.udid, '-configuration', 'Debug'];
      (_args = args).push.apply(_args, genericArgs);

      var versionMatch = new RegExp(/^(\d+)\.(\d+)/).exec(this.platformVersion);
      if (versionMatch) {
        args.push('IPHONEOS_DEPLOYMENT_TARGET=' + versionMatch[1] + '.' + versionMatch[2]);
      } else {
        _logger2['default'].warn('Cannot parse major and minor version numbers from platformVersion "' + this.platformVersion + '". ' + 'Will build for the default platform instead');
      }

      if (this.realDevice && this.xcodeConfigFile) {
        _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
        args.push('-xcconfig', this.xcodeConfigFile);
      }

      return { cmd: cmd, args: args };
    }
  }, {
    key: 'createXcodeBuildSubProcess',
    value: function createXcodeBuildSubProcess() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var _getXcodeBuildCommand, cmd, args, xcodebuild, logXcodeOutput;

      return _regeneratorRuntime.async(function createXcodeBuildSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.realDevice) {
              context$2$0.next = 8;
              break;
            }

            if (!(this.keychainPath && this.keychainPassword)) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.setRealDeviceSecurity)(this.keychainPath, this.keychainPassword));

          case 4:
            if (!(this.xcodeOrgId && this.xcodeSigningId && !this.xcodeConfigFile)) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _utilsJs.generateXcodeConfigFile)(this.xcodeOrgId, this.xcodeSigningId));

          case 7:
            this.xcodeConfigFile = context$2$0.sent;

          case 8:
            _getXcodeBuildCommand = this.getXcodeBuildCommand(buildOnly);
            cmd = _getXcodeBuildCommand.cmd;
            args = _getXcodeBuildCommand.args;

            _logger2['default'].debug('Beginning ' + (buildOnly ? 'build' : 'test') + ' with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            xcodebuild = new _teen_process.SubProcess(cmd, args, { cwd: this.bootstrapPath });
            logXcodeOutput = this.showXcodeLog;

            _logger2['default'].debug('Output from xcodebuild ' + (logXcodeOutput ? 'will' : 'will not') + ' be logged');
            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                xcodebuild.logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + xcodebuild.logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              // but do not log permission errors from trying to write to attachments folder
              if (out.indexOf('Error Domain=') !== -1 && out.indexOf('Error writing attachment data to file') === -1) {
                logXcodeOutput = true;

                // terrible hack to handle case where xcode return 0 but is failing
                xcodebuild._wda_error_occurred = true;
              }

              if (logXcodeOutput) {
                // do not log permission errors from trying to write to attachments folder
                if (out.indexOf('Error writing attachment data to file') === -1) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = _getIterator(out.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var line = _step.value;

                      xcodeLog.info(line);
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createiProxySubProcess',
    value: function createiProxySubProcess(localport, deviceport) {
      _logger2['default'].debug('Starting iproxy to forward traffic from local port ' + localport + ' to device port ' + deviceport + ' over USB');
      return new _teen_process.SubProcess('iproxy', [localport, deviceport, this.device.udid]);
    }
  }, {
    key: 'startXcodebuild',
    value: function startXcodebuild() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      return _regeneratorRuntime.async(function startXcodebuild$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this.xcodebuild.on('exit', function callee$3$0(code, signal) {
                var data, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                      // print out the xcodebuild file if users have asked for it

                      if (!(this.showXcodeLog && this.xcodebuild.logLocation)) {
                        context$4$0.next = 31;
                        break;
                      }

                      xcodeLog.info('Contents of xcodebuild log file \'' + this.xcodebuild.logLocation + '\':');
                      context$4$0.prev = 3;
                      context$4$0.next = 6;
                      return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(this.xcodebuild.logLocation, 'utf-8'));

                    case 6:
                      data = context$4$0.sent;
                      _iteratorNormalCompletion2 = true;
                      _didIteratorError2 = false;
                      _iteratorError2 = undefined;
                      context$4$0.prev = 10;

                      for (_iterator2 = _getIterator(data.split('\n')); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        line = _step2.value;

                        xcodeLog.info(line);
                      }
                      context$4$0.next = 18;
                      break;

                    case 14:
                      context$4$0.prev = 14;
                      context$4$0.t0 = context$4$0['catch'](10);
                      _didIteratorError2 = true;
                      _iteratorError2 = context$4$0.t0;

                    case 18:
                      context$4$0.prev = 18;
                      context$4$0.prev = 19;

                      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                      }

                    case 21:
                      context$4$0.prev = 21;

                      if (!_didIteratorError2) {
                        context$4$0.next = 24;
                        break;
                      }

                      throw _iteratorError2;

                    case 24:
                      return context$4$0.finish(21);

                    case 25:
                      return context$4$0.finish(18);

                    case 26:
                      context$4$0.next = 31;
                      break;

                    case 28:
                      context$4$0.prev = 28;
                      context$4$0.t1 = context$4$0['catch'](3);

                      _logger2['default'].debug('Unable to access xcodebuild log file: \'' + context$4$0.t1.message + '\'');

                    case 31:
                      this.xcodebuild.processExited = true;

                      if (!(this.xcodebuild._wda_error_occurred || !signal && code !== 0)) {
                        context$4$0.next = 34;
                        break;
                      }

                      return context$4$0.abrupt('return', reject(new Error('xcodebuild failed with code ' + code)));

                    case 34:
                      if (!buildOnly) {
                        context$4$0.next = 36;
                        break;
                      }

                      return context$4$0.abrupt('return', resolve());

                    case 36:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[3, 28], [10, 14, 18, 26], [19,, 21, 25]]);
              });

              return (function callee$3$0() {
                var startTime, _status, msg;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      startTime = process.hrtime();
                      context$4$0.next = 4;
                      return _regeneratorRuntime.awrap(this.xcodebuild.start());

                    case 4:
                      if (buildOnly) {
                        context$4$0.next = 9;
                        break;
                      }

                      context$4$0.next = 7;
                      return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                    case 7:
                      _status = context$4$0.sent;

                      resolve(_status);

                    case 9:
                      context$4$0.next = 16;
                      break;

                    case 11:
                      context$4$0.prev = 11;
                      context$4$0.t0 = context$4$0['catch'](0);
                      msg = 'Unable to start WebDriverAgent: ' + context$4$0.t0;

                      _logger2['default'].error(msg);
                      reject(new Error(msg));

                    case 16:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[0, 11]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var currentStatus, retries, endTime, startupTime;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // try to connect once every 0.5 seconds, until `wdaLaunchTimeout` is up
            _logger2['default'].debug('Waiting up to ' + this.wdaLaunchTimeout + 'ms for WebDriverAgent to start');
            currentStatus = null;
            context$2$0.prev = 2;
            retries = parseInt(this.wdaLaunchTimeout / 500, 10);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 500, function callee$2$0() {
              var proxyTimeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!this.xcodebuild.processExited) {
                      context$3$0.next = 2;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 2:
                    proxyTimeout = this.noSessionProxy.timeout;

                    this.noSessionProxy.timeout = 1000;
                    context$3$0.prev = 4;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(this.noSessionProxy.command('/status', 'GET'));

                  case 7:
                    currentStatus = context$3$0.sent;

                    if (currentStatus && currentStatus.ios && currentStatus.ios.ip) {
                      this.agentUrl = currentStatus.ios.ip;
                      _logger2['default'].debug('WebDriverAgent running on ip \'' + this.agentUrl + '\'');
                    }
                    context$3$0.next = 14;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](4);
                    throw new Error('Unable to connect to running WebDriverAgent: ' + context$3$0.t0.message);

                  case 14:
                    context$3$0.prev = 14;

                    this.noSessionProxy.timeout = proxyTimeout;
                    return context$3$0.finish(14);

                  case 17:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[4, 11, 14, 17]]);
            }));

          case 6:
            if (!this.xcodebuild.processExited) {
              context$2$0.next = 8;
              break;
            }

            return context$2$0.abrupt('return', currentStatus);

          case 8:
            endTime = process.hrtime(startTime);
            startupTime = parseInt((endTime[0] * 1e9 + endTime[1]) / 1e6, 10);

            _logger2['default'].debug('WebDriverAgent successfully started after ' + startupTime + 'ms');
            context$2$0.next = 17;
            break;

          case 13:
            context$2$0.prev = 13;
            context$2$0.t0 = context$2$0['catch'](2);

            // at this point, if we have not had any errors from xcode itself (reported
            // elsewhere), we can let this go through and try to create the session
            _logger2['default'].debug(context$2$0.t0.message);
            _logger2['default'].warn('Getting status of WebDriverAgent on device timed out. Continuing');

          case 17:
            return context$2$0.abrupt('return', currentStatus);

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 13]]);
    }
  }, {
    key: 'startiproxy',
    value: function startiproxy() {
      return _regeneratorRuntime.async(function startiproxy$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this3.iproxy.on('exit', function (code) {
                _logger2['default'].debug('iproxy exited with code \'' + code + '\'');
                if (code) {
                  return reject(new Error('iproxy exited with code \'' + code + '\''));
                }
              });
              _this3.iproxy.on('output', function (stdout, stderr) {
                // do nothing if we expect errors
                if (_this3.expectIProxyErrors) {
                  return;
                }

                var out = stdout || stderr;
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _getIterator(out.split('\n')), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var line = _step3.value;

                    if (!line.length) {
                      continue;
                    }

                    if (line.indexOf('Resource temporarily unavailable') !== -1) {
                      // this generally happens when WDA does not respond,
                      // so print a more useful message
                      _logger2['default'].debug('Connection to WDA timed out');
                    } else {
                      iproxyLog.debug(line);
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                      _iterator3['return']();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              });

              return (function callee$3$0() {
                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      context$4$0.next = 3;
                      return _regeneratorRuntime.awrap(this.iproxy.start(IPROXY_TIMEOUT));

                    case 3:
                      resolve();
                      context$4$0.next = 10;
                      break;

                    case 6:
                      context$4$0.prev = 6;
                      context$4$0.t0 = context$4$0['catch'](0);

                      _logger2['default'].error('Error starting iproxy: \'' + context$4$0.t0.message + '\'');
                      reject(new Error('Unable to start iproxy. Is it installed?'));

                    case 10:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this3, [[0, 6]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killHangingProcesses',
    value: function killHangingProcesses() {
      var procNames, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, proc;

      return _regeneratorRuntime.async(function killHangingProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Killing hanging processes');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, 'xcodebuild'));

          case 3:
            procNames = this.realDevice ? ['iproxy'] : ['XCTRunner'];
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            context$2$0.prev = 7;
            _iterator4 = _getIterator(procNames);

          case 9:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              context$2$0.next = 16;
              break;
            }

            proc = _step4.value;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, proc));

          case 13:
            _iteratorNormalCompletion4 = true;
            context$2$0.next = 9;
            break;

          case 16:
            context$2$0.next = 22;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError4 = true;
            _iteratorError4 = context$2$0.t0;

          case 22:
            context$2$0.prev = 22;
            context$2$0.prev = 23;

            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }

          case 25:
            context$2$0.prev = 25;

            if (!_didIteratorError4) {
              context$2$0.next = 28;
              break;
            }

            throw _iteratorError4;

          case 28:
            return context$2$0.finish(25);

          case 29:
            return context$2$0.finish(22);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: 'quit',
    value: function quit() {
      var killProcess;
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            killProcess = function killProcess(name, proc) {
              return _regeneratorRuntime.async(function killProcess$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!(proc && proc.proc)) {
                      context$3$0.next = 22;
                      break;
                    }

                    _logger2['default'].info('Shutting down ' + name + ' process (pid ' + proc.proc.pid + ')');
                    context$3$0.prev = 2;
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(proc.stop('SIGTERM', 1000));

                  case 5:
                    context$3$0.next = 22;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](2);

                    if (!(context$3$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
                      context$3$0.next = 11;
                      break;
                    }

                    throw context$3$0.t0;

                  case 11:
                    _logger2['default'].debug(name + ' process did not end in a timely fashion: \'' + context$3$0.t0.message + '\'. ' + 'Sending \'SIGKILL\'...');
                    context$3$0.prev = 12;
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(proc.stop('SIGKILL'));

                  case 15:
                    context$3$0.next = 22;
                    break;

                  case 17:
                    context$3$0.prev = 17;
                    context$3$0.t1 = context$3$0['catch'](12);

                    if (!(context$3$0.t1.message.indexOf('not currently running') !== -1)) {
                      context$3$0.next = 21;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 21:
                    throw context$3$0.t1;

                  case 22:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[2, 7], [12, 17]]);
            };

            _logger2['default'].info('Shutting down sub-processes');

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(killProcess('xcodebuild', this.xcodebuild));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(killProcess('iproxy', this.iproxy));

          case 6:
            if (!(this.realDevice && this.updatedWDABundleId)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.resetProjectFile)(this.agentPath, this.updatedWDABundleId));

          case 9:

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            this.expectIProxyErrors = true;

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'url',
    get: function get() {
      if (!this._url) {
        if (this.realDevice && this.wdaLocalPort) {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + this.wdaLocalPort);
        } else {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + WDA_AGENT_PORT);
        }
      }
      return this._url;
    },
    set: function set(_url) {
      this._url = _url3['default'].parse(_url);
    }
  }, {
    key: 'fullyStarted',
    get: function get() {
      return !this.expectIProxyErrors;
    },
    set: function set() {
      var started = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      // before WDA is started we expect errors from iproxy, since it is not
      // communicating with anything yet
      this.expectIProxyErrors = !started;
    }
  }, {
    key: 'derivedDataPath',
    get: function get() {
      if (!this._derivedDataPath) {
        // https://regex101.com/r/PqmX8I/1
        var folderRegexp = /(.+\/WebDriverAgent-[^\/]+)/;
        var match = folderRegexp.exec(this.xcodebuild.logLocation);
        if (!match) {
          return;
        }
        this._derivedDataPath = match[1];
      }
      return this._derivedDataPath;
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
exports.WebDriverAgent = WebDriverAgent;
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;

// make sure that the WDA dependencies have been built

// if necessary, update the bundleId to user's specification

//kill all hanging processes

// start the xcodebuild process

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// in the case of just building, the process will exit and that is our finish

// there has been an error elsewhere and we need to short-circuit

// there has been an error elsewhere and we need to short-circuit

// must get [s, ns] array into ms

// the process ended but for some reason we were not informed

// if necessary, reset the bundleId to original value
//# sourceMappingURL=data:application/json;charset=utf8;base64,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Z0IsRUFBRTs7QUFFMUIsWUFBTSxZQUFZLEdBQUcsNkJBQTZCLENBQUM7QUFDbkQsWUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNELFlBQUksQ0FBQyxLQUFLLEVBQUU7QUFDVixpQkFBTztTQUNSO0FBQ0QsWUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNsQztBQUNELGFBQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0tBQzlCOzs7U0F0Y0csY0FBYzs7O3FCQXljTCxjQUFjO1FBQ3BCLGNBQWMsR0FBZCxjQUFjO1FBQUUsYUFBYSxHQUFiLGFBQWE7UUFBRSxjQUFjLEdBQWQsY0FBYyIsImZpbGUiOiJsaWIvd2ViZHJpdmVyYWdlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBKV1Byb3h5IH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGZzLCBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IE5vU2Vzc2lvblByb3h5IH0gZnJvbSBcIi4vbm8tc2Vzc2lvbi1wcm94eVwiO1xuaW1wb3J0IHsga2lsbEFwcFVzaW5nQXBwTmFtZSwgZ2VuZXJhdGVYY29kZUNvbmZpZ0ZpbGUgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IHVwZGF0ZVByb2plY3RGaWxlLCByZXNldFByb2plY3RGaWxlLCBjaGVja0ZvckRlcGVuZGVuY2llcyxcbiAgICAgICAgIHNldFJlYWxEZXZpY2VTZWN1cml0eSwgZml4Rm9yWGNvZGU3IH0gZnJvbSAnLi93ZWJkcml2ZXJhZ2VudC11dGlscyc7XG5cblxuY29uc3QgeGNvZGVMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdYY29kZScpO1xuY29uc3QgaXByb3h5TG9nID0gbG9nZ2VyLmdldExvZ2dlcignaVByb3h5Jyk7XG5cbmNvbnN0IEJPT1RTVFJBUF9QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ1dlYkRyaXZlckFnZW50Jyk7XG5jb25zdCBXREFfQlVORExFX0lEID0gJ2NvbS5hcHBsZS50ZXN0LldlYkRyaXZlckFnZW50UnVubmVyLVJ1bm5lcic7XG5jb25zdCBERUZBVUxUX1NJR05JTkdfSUQgPSBcImlQaG9uZSBEZXZlbG9wZXJcIjtcbmNvbnN0IFdEQV9MQVVOQ0hfVElNRU9VVCA9IDYwICogMTAwMDtcbmNvbnN0IElQUk9YWV9USU1FT1VUID0gNTAwMDtcbmNvbnN0IFdEQV9BR0VOVF9QT1JUID0gODEwMDtcbmNvbnN0IFdEQV9CQVNFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0JztcbmNvbnN0IEJVSUxEX1RFU1RfREVMQVkgPSAxMDAwO1xuXG5jbGFzcyBXZWJEcml2ZXJBZ2VudCB7XG5cbiAgLy8gYWdlbnRQYXRoIChvcHRpb25hbCk6IFBhdGggdG8gV2ViZHJpdmVyQWdlbnQgRXhlY3V0YWJsZSAoaW5zaWRlIFdlYkRyaXZlckFnZW50LmFwcClcbiAgY29uc3RydWN0b3IgKHhjb2RlVmVyc2lvbiwgYXJncyA9IHt9KSB7XG4gICAgdGhpcy54Y29kZVZlcnNpb24gPSB4Y29kZVZlcnNpb247XG5cbiAgICB0aGlzLmRldmljZSA9IGFyZ3MuZGV2aWNlO1xuICAgIHRoaXMucGxhdGZvcm1WZXJzaW9uID0gYXJncy5wbGF0Zm9ybVZlcnNpb247XG4gICAgdGhpcy5ob3N0ID0gYXJncy5ob3N0O1xuICAgIHRoaXMucmVhbERldmljZSA9ICEhYXJncy5yZWFsRGV2aWNlO1xuXG4gICAgdGhpcy5zZXRXREFQYXRocyhhcmdzLmJvb3RzdHJhcFBhdGgsIGFyZ3MuYWdlbnRQYXRoKTtcblxuICAgIHRoaXMud2RhTG9jYWxQb3J0ID0gYXJncy53ZGFMb2NhbFBvcnQ7XG4gICAgdGhpcy5zaG93WGNvZGVMb2cgPSAhIWFyZ3Muc2hvd1hjb2RlTG9nO1xuICAgIHRoaXMueGNvZGVDb25maWdGaWxlID0gYXJncy54Y29kZUNvbmZpZ0ZpbGU7XG4gICAgdGhpcy54Y29kZU9yZ0lkID0gYXJncy54Y29kZU9yZ0lkO1xuICAgIHRoaXMueGNvZGVTaWduaW5nSWQgPSBhcmdzLnhjb2RlU2lnbmluZ0lkIHx8IERFRkFVTFRfU0lHTklOR19JRDtcbiAgICB0aGlzLmtleWNoYWluUGF0aCA9IGFyZ3Mua2V5Y2hhaW5QYXRoO1xuICAgIHRoaXMua2V5Y2hhaW5QYXNzd29yZCA9IGFyZ3Mua2V5Y2hhaW5QYXNzd29yZDtcblxuICAgIHRoaXMucHJlYnVpbGRXREEgPSBhcmdzLnByZWJ1aWxkV0RBO1xuICAgIHRoaXMudXNlUHJlYnVpbHRXREEgPSBhcmdzLnVzZVByZWJ1aWx0V0RBO1xuICAgIHRoaXMudXNlU2ltcGxlQnVpbGRUZXN0ID0gYXJncy51c2VTaW1wbGVCdWlsZFRlc3Q7XG5cbiAgICB0aGlzLndlYkRyaXZlckFnZW50VXJsID0gYXJncy53ZWJEcml2ZXJBZ2VudFVybDtcblxuICAgIHRoaXMudXBkYXRlZFdEQUJ1bmRsZUlkID0gYXJncy51cGRhdGVkV0RBQnVuZGxlSWQ7XG5cbiAgICB0aGlzLmV4cGVjdElQcm94eUVycm9ycyA9IHRydWU7XG5cbiAgICB0aGlzLndkYUxhdW5jaFRpbWVvdXQgPSBhcmdzLndkYUxhdW5jaFRpbWVvdXQgfHwgV0RBX0xBVU5DSF9USU1FT1VUO1xuICAgIHRoaXMud2RhQ29ubmVjdGlvblRpbWVvdXQgPSBhcmdzLndkYUNvbm5lY3Rpb25UaW1lb3V0O1xuXG4gICAgdGhpcy51c2VDYXJ0aGFnZVNzbCA9IF8uaXNCb29sZWFuKGFyZ3MudXNlQ2FydGhhZ2VTc2wpICYmIGFyZ3MudXNlQ2FydGhhZ2VTc2w7XG4gIH1cblxuICBzZXRXREFQYXRocyAoYm9vdHN0cmFwUGF0aCwgYWdlbnRQYXRoKSB7XG4gICAgLy8gYWxsb3cgdGhlIHVzZXIgdG8gc3BlY2lmeSBhIHBsYWNlIGZvciBXREEuIFRoaXMgaXMgdW5kb2N1bWVudGVkIGFuZFxuICAgIC8vIG9ubHkgaGVyZSBmb3IgdGhlIHB1cnBvc2VzIG9mIHRlc3RpbmcgZGV2ZWxvcG1lbnQgb2YgV0RBXG4gICAgdGhpcy5ib290c3RyYXBQYXRoID0gYm9vdHN0cmFwUGF0aCB8fCBCT09UU1RSQVBfUEFUSDtcbiAgICBsb2cuaW5mbyhgVXNpbmcgV0RBIHBhdGg6ICcke3RoaXMuYm9vdHN0cmFwUGF0aH0nYCk7XG5cbiAgICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gc3BlY2lmeSBhZ2VudFBhdGggdG9vXG4gICAgdGhpcy5hZ2VudFBhdGggPSBhZ2VudFBhdGggfHwgcGF0aC5yZXNvbHZlKHRoaXMuYm9vdHN0cmFwUGF0aCwgJ1dlYkRyaXZlckFnZW50Lnhjb2RlcHJvaicpO1xuICAgIGxvZy5pbmZvKGBVc2luZyBXREEgYWdlbnQ6ICcke3RoaXMuYWdlbnRQYXRofSdgKTtcbiAgfVxuXG4gIGFzeW5jIHVuaW5zdGFsbCAoKSB7XG4gICAgbG9nLmRlYnVnKGBSZW1vdmluZyBXREEgYXBwbGljYXRpb24gZnJvbSBkZXZpY2VgKTtcbiAgICBhd2FpdCB0aGlzLmRldmljZS5yZW1vdmVBcHAoV0RBX0JVTkRMRV9JRCk7XG4gIH1cblxuICBhc3luYyBsYXVuY2ggKHNlc3Npb25JZCkge1xuICAgIGlmICh0aGlzLndlYkRyaXZlckFnZW50VXJsKSB7XG4gICAgICBsb2cuaW5mbyhgVXNpbmcgcHJvdmlkZWQgV2ViZHJpdmVyQWdlbnQgYXQgJyR7dGhpcy53ZWJEcml2ZXJBZ2VudFVybH0nYCk7XG4gICAgICB0aGlzLnVybCA9IHRoaXMud2ViRHJpdmVyQWdlbnRVcmw7XG4gICAgICB0aGlzLnNldHVwUHJveGllcyhzZXNzaW9uSWQpO1xuICAgICAgcmV0dXJuIHRoaXMud2ViRHJpdmVyQWdlbnRVcmw7XG4gICAgfVxuXG4gICAgbG9nLmluZm8oJ0xhdW5jaGluZyBXZWJEcml2ZXJBZ2VudCBvbiB0aGUgZGV2aWNlJyk7XG5cbiAgICB0aGlzLnNldHVwUHJveGllcyhzZXNzaW9uSWQpO1xuXG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5hZ2VudFBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyeWluZyB0byB1c2UgV2ViRHJpdmVyQWdlbnQgcHJvamVjdCBhdCAnJHt0aGlzLmFnZW50UGF0aH0nIGJ1dCB0aGUgYCArXG4gICAgICAgICAgICAgICAgICAgICAgJ2ZpbGUgZG9lcyBub3QgZXhpc3QnKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgV0RBIGRlcGVuZGVuY2llcyBoYXZlIGJlZW4gYnVpbHRcbiAgICBhd2FpdCBjaGVja0ZvckRlcGVuZGVuY2llcyh0aGlzLmJvb3RzdHJhcFBhdGgsIHRoaXMudXNlQ2FydGhhZ2VTc2wpO1xuXG4gICAgLy8gaWYgbmVjZXNzYXJ5LCB1cGRhdGUgdGhlIGJ1bmRsZUlkIHRvIHVzZXIncyBzcGVjaWZpY2F0aW9uXG4gICAgaWYgKHRoaXMucmVhbERldmljZSAmJiB0aGlzLnVwZGF0ZWRXREFCdW5kbGVJZCkge1xuICAgICAgYXdhaXQgdXBkYXRlUHJvamVjdEZpbGUodGhpcy5hZ2VudFBhdGgsIHRoaXMudXBkYXRlZFdEQUJ1bmRsZUlkKTtcbiAgICB9XG5cbiAgICAvL2tpbGwgYWxsIGhhbmdpbmcgcHJvY2Vzc2VzXG4gICAgYXdhaXQgdGhpcy5raWxsSGFuZ2luZ1Byb2Nlc3NlcygpO1xuXG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yID09PSA3IHx8ICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA9PT0gOCAmJiB0aGlzLnhjb2RlVmVyc2lvbi5taW5vciA9PT0gMCkpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgVXNpbmcgWGNvZGUgJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSwgc28gZml4aW5nIFdEQSBjb2RlYmFzZWApO1xuICAgICAgYXdhaXQgZml4Rm9yWGNvZGU3KHRoaXMuYm9vdHN0cmFwUGF0aCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJlYnVpbGRXREEpIHtcbiAgICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNykge1xuICAgICAgICBsb2cuZGVidWcoYENhcGFiaWxpdHkgJ3ByZWJ1aWxkV0RBJyBzZXQsIGJ1dCBvbiB4Y29kZSB2ZXJzaW9uICR7dGhpcy54Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gc28gc2tpcHBpbmdgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZpcnN0IGRvIGEgYnVpbGQgcGhhc2VcbiAgICAgICAgbG9nLmRlYnVnKCdQcmUtYnVpbGRpbmcgV0RBIGJlZm9yZSBsYXVuY2hpbmcgdGVzdCcpO1xuICAgICAgICB0aGlzLnVzZVByZWJ1aWx0V0RBID0gdHJ1ZTtcbiAgICAgICAgdGhpcy54Y29kZWJ1aWxkID0gYXdhaXQgdGhpcy5jcmVhdGVYY29kZUJ1aWxkU3ViUHJvY2Vzcyh0cnVlKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdGFydFhjb2RlYnVpbGQodHJ1ZSk7XG4gICAgICAgIHRoaXMueGNvZGVidWlsZCA9IG51bGw7XG4gICAgICAgIC8vIHBhdXNlIGEgbW9tZW50XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoQlVJTERfVEVTVF9ERUxBWSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy54Y29kZWJ1aWxkID0gYXdhaXQgdGhpcy5jcmVhdGVYY29kZUJ1aWxkU3ViUHJvY2VzcygpO1xuXG4gICAgaWYgKHRoaXMucmVhbERldmljZSkge1xuICAgICAgdGhpcy5pcHJveHkgPSB0aGlzLmNyZWF0ZWlQcm94eVN1YlByb2Nlc3ModGhpcy51cmwucG9ydCwgV0RBX0FHRU5UX1BPUlQpO1xuICAgICAgYXdhaXQgdGhpcy5zdGFydGlwcm94eSgpO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0IHRoZSB4Y29kZWJ1aWxkIHByb2Nlc3NcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zdGFydFhjb2RlYnVpbGQoKTtcbiAgfVxuXG4gIHNldHVwUHJveGllcyAoc2Vzc2lvbklkKSB7XG4gICAgY29uc3QgcHJveHlPcHRzID0ge1xuICAgICAgc2VydmVyOiB0aGlzLnVybC5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6IHRoaXMudXJsLnBvcnQsXG4gICAgICBiYXNlOiAnJyxcbiAgICAgIHRpbWVvdXQ6IHRoaXMud2RhQ29ubmVjdGlvblRpbWVvdXQsXG4gICAgfTtcblxuICAgIHRoaXMuandwcm94eSA9IG5ldyBKV1Byb3h5KHByb3h5T3B0cyk7XG4gICAgdGhpcy5qd3Byb3h5LnNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy5qd3Byb3h5LnByb3h5UmVxUmVzLmJpbmQodGhpcy5qd3Byb3h5KTtcblxuICAgIHRoaXMubm9TZXNzaW9uUHJveHkgPSBuZXcgTm9TZXNzaW9uUHJveHkocHJveHlPcHRzKTtcbiAgICB0aGlzLm5vU2Vzc2lvblByb3h5UmVxUmVzID0gdGhpcy5ub1Nlc3Npb25Qcm94eS5wcm94eVJlcVJlcy5iaW5kKHRoaXMubm9TZXNzaW9uUHJveHkpO1xuICB9XG5cbiAgZ2V0WGNvZGVCdWlsZENvbW1hbmQgKGJ1aWxkT25seSA9IGZhbHNlKSB7XG4gICAgbGV0IGNtZCA9ICd4Y29kZWJ1aWxkJztcbiAgICBsZXQgYXJncztcblxuICAgIC8vIGZpZ3VyZSBvdXQgdGhlIHRhcmdldHMgZm9yIHhjb2RlYnVpbGRcbiAgICBpZiAodGhpcy54Y29kZVZlcnNpb24ubWFqb3IgPCA4KSB7XG4gICAgICBpZiAodGhpcy51c2VQcmVidWlsdFdEQSkge1xuICAgICAgICBsZXQgbXNnID0gYCd1c2VQcmVidWlsdFdEQScgc2V0LCBidXQgb24gWGNvZGUgYCArXG4gICAgICAgICAgICAgICAgICBgJyR7dGhpcy54Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30nLCBzbyBza2lwcGluZywgYXMgaXQgYCArXG4gICAgICAgICAgICAgICAgICBgbmVlZHMgYSB2ZXJzaW9uID49IDhgO1xuICAgICAgICBsb2cud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgYXJncyA9W1xuICAgICAgICAnYnVpbGQnLFxuICAgICAgICAndGVzdCcsXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgW2J1aWxkQ21kLCB0ZXN0Q21kXSA9IHRoaXMudXNlU2ltcGxlQnVpbGRUZXN0ID8gWydidWlsZCcsICd0ZXN0J10gOiBbJ2J1aWxkLWZvci10ZXN0aW5nJywgJ3Rlc3Qtd2l0aG91dC1idWlsZGluZyddO1xuICAgICAgaWYgKGJ1aWxkT25seSkge1xuICAgICAgICBhcmdzID0gW2J1aWxkQ21kXTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy51c2VQcmVidWlsdFdEQSkge1xuICAgICAgICBhcmdzID0gW3Rlc3RDbWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJncyA9IFtidWlsZENtZCwgdGVzdENtZF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHRoZSByZXN0IG9mIHRoZSBhcmd1bWVudHMgZm9yIHRoZSB4Y29kZWJ1aWxkIGNvbW1hbmRcbiAgICBsZXQgZ2VuZXJpY0FyZ3MgPSBbXG4gICAgICAnLXByb2plY3QnLCB0aGlzLmFnZW50UGF0aCxcbiAgICAgICctc2NoZW1lJywgJ1dlYkRyaXZlckFnZW50UnVubmVyJyxcbiAgICAgICctZGVzdGluYXRpb24nLCBgaWQ9JHt0aGlzLmRldmljZS51ZGlkfWAsXG4gICAgICAnLWNvbmZpZ3VyYXRpb24nLCAnRGVidWcnXG4gICAgXTtcbiAgICBhcmdzLnB1c2goLi4uZ2VuZXJpY0FyZ3MpO1xuXG4gICAgY29uc3QgdmVyc2lvbk1hdGNoID0gbmV3IFJlZ0V4cCgvXihcXGQrKVxcLihcXGQrKS8pLmV4ZWModGhpcy5wbGF0Zm9ybVZlcnNpb24pO1xuICAgIGlmICh2ZXJzaW9uTWF0Y2gpIHtcbiAgICAgIGFyZ3MucHVzaChgSVBIT05FT1NfREVQTE9ZTUVOVF9UQVJHRVQ9JHt2ZXJzaW9uTWF0Y2hbMV19LiR7dmVyc2lvbk1hdGNoWzJdfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2FybihgQ2Fubm90IHBhcnNlIG1ham9yIGFuZCBtaW5vciB2ZXJzaW9uIG51bWJlcnMgZnJvbSBwbGF0Zm9ybVZlcnNpb24gXCIke3RoaXMucGxhdGZvcm1WZXJzaW9ufVwiLiBgICtcbiAgICAgICAgICAgICAgICdXaWxsIGJ1aWxkIGZvciB0aGUgZGVmYXVsdCBwbGF0Zm9ybSBpbnN0ZWFkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVhbERldmljZSAmJiB0aGlzLnhjb2RlQ29uZmlnRmlsZSkge1xuICAgICAgbG9nLmRlYnVnKGBVc2luZyBYY29kZSBjb25maWd1cmF0aW9uIGZpbGU6ICcke3RoaXMueGNvZGVDb25maWdGaWxlfSdgKTtcbiAgICAgIGFyZ3MucHVzaCgnLXhjY29uZmlnJywgdGhpcy54Y29kZUNvbmZpZ0ZpbGUpO1xuICAgIH1cblxuICAgIHJldHVybiB7Y21kLCBhcmdzfTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVhjb2RlQnVpbGRTdWJQcm9jZXNzIChidWlsZE9ubHkgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLnJlYWxEZXZpY2UpIHtcbiAgICAgIGlmICh0aGlzLmtleWNoYWluUGF0aCAmJiB0aGlzLmtleWNoYWluUGFzc3dvcmQpIHtcbiAgICAgICAgYXdhaXQgc2V0UmVhbERldmljZVNlY3VyaXR5KHRoaXMua2V5Y2hhaW5QYXRoLCB0aGlzLmtleWNoYWluUGFzc3dvcmQpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMueGNvZGVPcmdJZCAmJiB0aGlzLnhjb2RlU2lnbmluZ0lkICYmICF0aGlzLnhjb2RlQ29uZmlnRmlsZSkge1xuICAgICAgICB0aGlzLnhjb2RlQ29uZmlnRmlsZSA9IGF3YWl0IGdlbmVyYXRlWGNvZGVDb25maWdGaWxlKHRoaXMueGNvZGVPcmdJZCwgdGhpcy54Y29kZVNpZ25pbmdJZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCB7Y21kLCBhcmdzfSA9IHRoaXMuZ2V0WGNvZGVCdWlsZENvbW1hbmQoYnVpbGRPbmx5KTtcbiAgICBsb2cuZGVidWcoYEJlZ2lubmluZyAke2J1aWxkT25seSA/ICdidWlsZCcgOiAndGVzdCd9IHdpdGggY29tbWFuZCAnJHtjbWR9ICR7YXJncy5qb2luKCcgJyl9JyBgICtcbiAgICAgICAgICAgICAgYGluIGRpcmVjdG9yeSAnJHt0aGlzLmJvb3RzdHJhcFBhdGh9J2ApO1xuICAgIGxldCB4Y29kZWJ1aWxkID0gbmV3IFN1YlByb2Nlc3MoY21kLCBhcmdzLCB7Y3dkOiB0aGlzLmJvb3RzdHJhcFBhdGh9KTtcblxuICAgIGxldCBsb2dYY29kZU91dHB1dCA9IHRoaXMuc2hvd1hjb2RlTG9nO1xuICAgIGxvZy5kZWJ1ZyhgT3V0cHV0IGZyb20geGNvZGVidWlsZCAke2xvZ1hjb2RlT3V0cHV0ID8gJ3dpbGwnIDogJ3dpbGwgbm90J30gYmUgbG9nZ2VkYCk7XG4gICAgeGNvZGVidWlsZC5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBsZXQgb3V0ID0gc3Rkb3V0IHx8IHN0ZGVycjtcbiAgICAgIC8vIHdlIHdhbnQgdG8gcHVsbCBvdXQgdGhlIGxvZyBmaWxlIHRoYXQgaXMgY3JlYXRlZCwgYW5kIGhpZ2hsaWdodCBpdFxuICAgICAgLy8gZm9yIGRpYWdub3N0aWMgcHVycG9zZXNcbiAgICAgIGlmIChvdXQuaW5kZXhPZignV3JpdGluZyBkaWFnbm9zdGljIGxvZyBmb3IgdGVzdCBzZXNzaW9uIHRvJykgIT09IC0xKSB7XG4gICAgICAgIC8vIHB1bGwgb3V0IHRoZSBmaXJzdCBsaW5lIHRoYXQgYmVnaW5zIHdpdGggdGhlIHBhdGggc2VwYXJhdG9yXG4gICAgICAgIC8vIHdoaWNoICpzaG91bGQqIGJlIHRoZSBsaW5lIGluZGljYXRpbmcgdGhlIGxvZyBmaWxlIGdlbmVyYXRlZFxuICAgICAgICB4Y29kZWJ1aWxkLmxvZ0xvY2F0aW9uID0gXy5maXJzdChfLnJlbW92ZShvdXQudHJpbSgpLnNwbGl0KCdcXG4nKSwgKHYpID0+IHYuaW5kZXhPZihwYXRoLnNlcCkgPT09IDApKTtcbiAgICAgICAgbG9nLmRlYnVnKGBMb2cgZmlsZSBmb3IgeGNvZGVidWlsZCB0ZXN0OiAke3hjb2RlYnVpbGQubG9nTG9jYXRpb259YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGhhdmUgYW4gZXJyb3Igd2Ugd2FudCB0byBvdXRwdXQgdGhlIGxvZ3NcbiAgICAgIC8vIG90aGVyd2lzZSB0aGUgZmFpbHVyZSBpcyBpbnNjcnV0aWJsZVxuICAgICAgLy8gYnV0IGRvIG5vdCBsb2cgcGVybWlzc2lvbiBlcnJvcnMgZnJvbSB0cnlpbmcgdG8gd3JpdGUgdG8gYXR0YWNobWVudHMgZm9sZGVyXG4gICAgICBpZiAob3V0LmluZGV4T2YoJ0Vycm9yIERvbWFpbj0nKSAhPT0gLTEgJiYgb3V0LmluZGV4T2YoJ0Vycm9yIHdyaXRpbmcgYXR0YWNobWVudCBkYXRhIHRvIGZpbGUnKSA9PT0gLTEpIHtcbiAgICAgICAgbG9nWGNvZGVPdXRwdXQgPSB0cnVlO1xuXG4gICAgICAgIC8vIHRlcnJpYmxlIGhhY2sgdG8gaGFuZGxlIGNhc2Ugd2hlcmUgeGNvZGUgcmV0dXJuIDAgYnV0IGlzIGZhaWxpbmdcbiAgICAgICAgeGNvZGVidWlsZC5fd2RhX2Vycm9yX29jY3VycmVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvZ1hjb2RlT3V0cHV0KSB7XG4gICAgICAgIC8vIGRvIG5vdCBsb2cgcGVybWlzc2lvbiBlcnJvcnMgZnJvbSB0cnlpbmcgdG8gd3JpdGUgdG8gYXR0YWNobWVudHMgZm9sZGVyXG4gICAgICAgIGlmIChvdXQuaW5kZXhPZignRXJyb3Igd3JpdGluZyBhdHRhY2htZW50IGRhdGEgdG8gZmlsZScpID09PSAtMSkge1xuICAgICAgICAgIGZvciAobGV0IGxpbmUgb2Ygb3V0LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAgICAgeGNvZGVMb2cuaW5mbyhsaW5lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB4Y29kZWJ1aWxkO1xuICB9XG5cbiAgY3JlYXRlaVByb3h5U3ViUHJvY2VzcyAobG9jYWxwb3J0LCBkZXZpY2Vwb3J0KSB7XG4gICAgbG9nLmRlYnVnKGBTdGFydGluZyBpcHJveHkgdG8gZm9yd2FyZCB0cmFmZmljIGZyb20gbG9jYWwgcG9ydCAke2xvY2FscG9ydH0gdG8gZGV2aWNlIHBvcnQgJHtkZXZpY2Vwb3J0fSBvdmVyIFVTQmApO1xuICAgIHJldHVybiBuZXcgU3ViUHJvY2VzcyhgaXByb3h5YCwgW2xvY2FscG9ydCwgZGV2aWNlcG9ydCwgdGhpcy5kZXZpY2UudWRpZF0pO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRYY29kZWJ1aWxkIChidWlsZE9ubHkgPSBmYWxzZSkge1xuICAgIC8vIHdyYXAgdGhlIHN0YXJ0IHByb2NlZHVyZSBpbiBhIHByb21pc2Ugc28gdGhhdCB3ZSBjYW4gY2F0Y2gsIGFuZCByZXBvcnQsXG4gICAgLy8gYW55IHN0YXJ0dXAgZXJyb3JzIHRoYXQgYXJlIHRocm93biBhcyBldmVudHNcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy54Y29kZWJ1aWxkLm9uKCdleGl0JywgYXN5bmMgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgICBsb2cuaW5mbyhgeGNvZGVidWlsZCBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9JyBhbmQgc2lnbmFsICcke3NpZ25hbH0nYCk7XG4gICAgICAgIC8vIHByaW50IG91dCB0aGUgeGNvZGVidWlsZCBmaWxlIGlmIHVzZXJzIGhhdmUgYXNrZWQgZm9yIGl0XG4gICAgICAgIGlmICh0aGlzLnNob3dYY29kZUxvZyAmJiB0aGlzLnhjb2RlYnVpbGQubG9nTG9jYXRpb24pIHtcbiAgICAgICAgICB4Y29kZUxvZy5pbmZvKGBDb250ZW50cyBvZiB4Y29kZWJ1aWxkIGxvZyBmaWxlICcke3RoaXMueGNvZGVidWlsZC5sb2dMb2NhdGlvbn0nOmApO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKHRoaXMueGNvZGVidWlsZC5sb2dMb2NhdGlvbiwgJ3V0Zi04Jyk7XG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIGRhdGEuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgICAgICAgIHhjb2RlTG9nLmluZm8obGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYFVuYWJsZSB0byBhY2Nlc3MgeGNvZGVidWlsZCBsb2cgZmlsZTogJyR7ZXJyLm1lc3NhZ2V9J2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhjb2RlYnVpbGQucHJvY2Vzc0V4aXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnhjb2RlYnVpbGQuX3dkYV9lcnJvcl9vY2N1cnJlZCB8fCAoIXNpZ25hbCAmJiBjb2RlICE9PSAwKSkge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKGB4Y29kZWJ1aWxkIGZhaWxlZCB3aXRoIGNvZGUgJHtjb2RlfWApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiBqdXN0IGJ1aWxkaW5nLCB0aGUgcHJvY2VzcyB3aWxsIGV4aXQgYW5kIHRoYXQgaXMgb3VyIGZpbmlzaFxuICAgICAgICBpZiAoYnVpbGRPbmx5KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBzdGFydFRpbWUgPSBwcm9jZXNzLmhydGltZSgpO1xuICAgICAgICAgIGF3YWl0IHRoaXMueGNvZGVidWlsZC5zdGFydCgpO1xuICAgICAgICAgIGlmICghYnVpbGRPbmx5KSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gYXdhaXQgdGhpcy53YWl0Rm9yU3RhcnQoc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIHJlc29sdmUoc3RhdHVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxldCBtc2cgPSBgVW5hYmxlIHRvIHN0YXJ0IFdlYkRyaXZlckFnZW50OiAke2Vycn1gO1xuICAgICAgICAgIGxvZy5lcnJvcihtc2cpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IobXNnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB3YWl0Rm9yU3RhcnQgKHN0YXJ0VGltZSkge1xuICAgIC8vIHRyeSB0byBjb25uZWN0IG9uY2UgZXZlcnkgMC41IHNlY29uZHMsIHVudGlsIGB3ZGFMYXVuY2hUaW1lb3V0YCBpcyB1cFxuICAgIGxvZy5kZWJ1ZyhgV2FpdGluZyB1cCB0byAke3RoaXMud2RhTGF1bmNoVGltZW91dH1tcyBmb3IgV2ViRHJpdmVyQWdlbnQgdG8gc3RhcnRgKTtcbiAgICBsZXQgY3VycmVudFN0YXR1cyA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXRyaWVzID0gcGFyc2VJbnQodGhpcy53ZGFMYXVuY2hUaW1lb3V0IC8gNTAwLCAxMCk7XG4gICAgICBhd2FpdCByZXRyeUludGVydmFsKHJldHJpZXMsIDUwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy54Y29kZWJ1aWxkLnByb2Nlc3NFeGl0ZWQpIHtcbiAgICAgICAgICAvLyB0aGVyZSBoYXMgYmVlbiBhbiBlcnJvciBlbHNld2hlcmUgYW5kIHdlIG5lZWQgdG8gc2hvcnQtY2lyY3VpdFxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm94eVRpbWVvdXQgPSB0aGlzLm5vU2Vzc2lvblByb3h5LnRpbWVvdXQ7XG4gICAgICAgIHRoaXMubm9TZXNzaW9uUHJveHkudGltZW91dCA9IDEwMDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY3VycmVudFN0YXR1cyA9IGF3YWl0IHRoaXMubm9TZXNzaW9uUHJveHkuY29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyAmJiBjdXJyZW50U3RhdHVzLmlvcyAmJiBjdXJyZW50U3RhdHVzLmlvcy5pcCkge1xuICAgICAgICAgICAgdGhpcy5hZ2VudFVybCA9IGN1cnJlbnRTdGF0dXMuaW9zLmlwO1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBXZWJEcml2ZXJBZ2VudCBydW5uaW5nIG9uIGlwICcke3RoaXMuYWdlbnRVcmx9J2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gY29ubmVjdCB0byBydW5uaW5nIFdlYkRyaXZlckFnZW50OiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRoaXMubm9TZXNzaW9uUHJveHkudGltZW91dCA9IHByb3h5VGltZW91dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnhjb2RlYnVpbGQucHJvY2Vzc0V4aXRlZCkge1xuICAgICAgICAvLyB0aGVyZSBoYXMgYmVlbiBhbiBlcnJvciBlbHNld2hlcmUgYW5kIHdlIG5lZWQgdG8gc2hvcnQtY2lyY3VpdFxuICAgICAgICByZXR1cm4gY3VycmVudFN0YXR1cztcbiAgICAgIH1cblxuICAgICAgbGV0IGVuZFRpbWUgPSBwcm9jZXNzLmhydGltZShzdGFydFRpbWUpO1xuICAgICAgLy8gbXVzdCBnZXQgW3MsIG5zXSBhcnJheSBpbnRvIG1zXG4gICAgICBsZXQgc3RhcnR1cFRpbWUgPSBwYXJzZUludCgoZW5kVGltZVswXSAqIDFlOSArIGVuZFRpbWVbMV0pIC8gMWU2LCAxMCk7XG4gICAgICBsb2cuZGVidWcoYFdlYkRyaXZlckFnZW50IHN1Y2Nlc3NmdWxseSBzdGFydGVkIGFmdGVyICR7c3RhcnR1cFRpbWV9bXNgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIGlmIHdlIGhhdmUgbm90IGhhZCBhbnkgZXJyb3JzIGZyb20geGNvZGUgaXRzZWxmIChyZXBvcnRlZFxuICAgICAgLy8gZWxzZXdoZXJlKSwgd2UgY2FuIGxldCB0aGlzIGdvIHRocm91Z2ggYW5kIHRyeSB0byBjcmVhdGUgdGhlIHNlc3Npb25cbiAgICAgIGxvZy5kZWJ1ZyhlcnIubWVzc2FnZSk7XG4gICAgICBsb2cud2FybihgR2V0dGluZyBzdGF0dXMgb2YgV2ViRHJpdmVyQWdlbnQgb24gZGV2aWNlIHRpbWVkIG91dC4gQ29udGludWluZ2ApO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudFN0YXR1cztcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0aXByb3h5ICgpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5pcHJveHkub24oJ2V4aXQnLCAoY29kZSkgPT4ge1xuICAgICAgICBsb2cuZGVidWcoYGlwcm94eSBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2ApO1xuICAgICAgICBpZiAoY29kZSkge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKGBpcHJveHkgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfSdgKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5pcHJveHkub24oJ291dHB1dCcsIChzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgICAvLyBkbyBub3RoaW5nIGlmIHdlIGV4cGVjdCBlcnJvcnNcbiAgICAgICAgaWYgKHRoaXMuZXhwZWN0SVByb3h5RXJyb3JzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG91dCA9IHN0ZG91dCB8fCBzdGRlcnI7XG4gICAgICAgIGZvciAobGV0IGxpbmUgb2Ygb3V0LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAgIGlmICghbGluZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJ1Jlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlJykgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGdlbmVyYWxseSBoYXBwZW5zIHdoZW4gV0RBIGRvZXMgbm90IHJlc3BvbmQsXG4gICAgICAgICAgICAvLyBzbyBwcmludCBhIG1vcmUgdXNlZnVsIG1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnQ29ubmVjdGlvbiB0byBXREEgdGltZWQgb3V0Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlwcm94eUxvZy5kZWJ1ZyhsaW5lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0aGlzLmlwcm94eS5zdGFydChJUFJPWFlfVElNRU9VVCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoYEVycm9yIHN0YXJ0aW5nIGlwcm94eTogJyR7ZXJyLm1lc3NhZ2V9J2ApO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBzdGFydCBpcHJveHkuIElzIGl0IGluc3RhbGxlZD8nKSk7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBraWxsSGFuZ2luZ1Byb2Nlc3NlcyAoKSB7XG4gICAgbG9nLmRlYnVnKCdLaWxsaW5nIGhhbmdpbmcgcHJvY2Vzc2VzJyk7XG4gICAgYXdhaXQga2lsbEFwcFVzaW5nQXBwTmFtZSh0aGlzLmRldmljZS51ZGlkLCBgeGNvZGVidWlsZGApO1xuICAgIGxldCBwcm9jTmFtZXMgPSB0aGlzLnJlYWxEZXZpY2UgPyBbJ2lwcm94eSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFsnWENUUnVubmVyJ107XG4gICAgZm9yIChsZXQgcHJvYyBvZiBwcm9jTmFtZXMpIHtcbiAgICAgIGF3YWl0IGtpbGxBcHBVc2luZ0FwcE5hbWUodGhpcy5kZXZpY2UudWRpZCwgcHJvYyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcXVpdCAoKSB7XG4gICAgbG9nLmluZm8oJ1NodXR0aW5nIGRvd24gc3ViLXByb2Nlc3NlcycpO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24ga2lsbFByb2Nlc3MgKG5hbWUsIHByb2MpIHtcbiAgICAgIGlmIChwcm9jICYmIHByb2MucHJvYykge1xuICAgICAgICBsb2cuaW5mbyhgU2h1dHRpbmcgZG93biAke25hbWV9IHByb2Nlc3MgKHBpZCAke3Byb2MucHJvYy5waWR9KWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHByb2Muc3RvcCgnU0lHVEVSTScsIDEwMDApO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZihgUHJvY2VzcyBkaWRuJ3QgZW5kIGFmdGVyYCkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZy5kZWJ1ZyhgJHtuYW1lfSBwcm9jZXNzIGRpZCBub3QgZW5kIGluIGEgdGltZWx5IGZhc2hpb246ICcke2Vyci5tZXNzYWdlfScuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgU2VuZGluZyAnU0lHS0lMTCcuLi5gKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcHJvYy5zdG9wKCdTSUdLSUxMJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZignbm90IGN1cnJlbnRseSBydW5uaW5nJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSBwcm9jZXNzIGVuZGVkIGJ1dCBmb3Igc29tZSByZWFzb24gd2Ugd2VyZSBub3QgaW5mb3JtZWRcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IGtpbGxQcm9jZXNzKCd4Y29kZWJ1aWxkJywgdGhpcy54Y29kZWJ1aWxkKTtcbiAgICBhd2FpdCBraWxsUHJvY2VzcygnaXByb3h5JywgdGhpcy5pcHJveHkpO1xuXG4gICAgLy8gaWYgbmVjZXNzYXJ5LCByZXNldCB0aGUgYnVuZGxlSWQgdG8gb3JpZ2luYWwgdmFsdWVcbiAgICBpZiAodGhpcy5yZWFsRGV2aWNlICYmIHRoaXMudXBkYXRlZFdEQUJ1bmRsZUlkKSB7XG4gICAgICBhd2FpdCByZXNldFByb2plY3RGaWxlKHRoaXMuYWdlbnRQYXRoLCB0aGlzLnVwZGF0ZWRXREFCdW5kbGVJZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuandwcm94eSkge1xuICAgICAgdGhpcy5qd3Byb3h5LnNlc3Npb25JZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5leHBlY3RJUHJveHlFcnJvcnMgPSB0cnVlO1xuICB9XG5cbiAgZ2V0IHVybCAoKSB7XG4gICAgaWYgKCF0aGlzLl91cmwpIHtcbiAgICAgIGlmICh0aGlzLnJlYWxEZXZpY2UgJiYgdGhpcy53ZGFMb2NhbFBvcnQpIHtcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsLnBhcnNlKGAke1dEQV9CQVNFX1VSTH06JHt0aGlzLndkYUxvY2FsUG9ydH1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3VybCA9IHVybC5wYXJzZShgJHtXREFfQkFTRV9VUkx9OiR7V0RBX0FHRU5UX1BPUlR9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBzZXQgdXJsIChfdXJsKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsLnBhcnNlKF91cmwpO1xuICB9XG5cbiAgZ2V0IGZ1bGx5U3RhcnRlZCAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmV4cGVjdElQcm94eUVycm9ycztcbiAgfVxuXG4gIHNldCBmdWxseVN0YXJ0ZWQgKHN0YXJ0ZWQgPSBmYWxzZSkge1xuICAgIC8vIGJlZm9yZSBXREEgaXMgc3RhcnRlZCB3ZSBleHBlY3QgZXJyb3JzIGZyb20gaXByb3h5LCBzaW5jZSBpdCBpcyBub3RcbiAgICAvLyBjb21tdW5pY2F0aW5nIHdpdGggYW55dGhpbmcgeWV0XG4gICAgdGhpcy5leHBlY3RJUHJveHlFcnJvcnMgPSAhc3RhcnRlZDtcbiAgfVxuXG4gIGdldCBkZXJpdmVkRGF0YVBhdGggKCkge1xuICAgIGlmICghdGhpcy5fZGVyaXZlZERhdGFQYXRoKSB7XG4gICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL1BxbVg4SS8xXG4gICAgICBjb25zdCBmb2xkZXJSZWdleHAgPSAvKC4rXFwvV2ViRHJpdmVyQWdlbnQtW15cXC9dKykvO1xuICAgICAgbGV0IG1hdGNoID0gZm9sZGVyUmVnZXhwLmV4ZWModGhpcy54Y29kZWJ1aWxkLmxvZ0xvY2F0aW9uKTtcbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGVyaXZlZERhdGFQYXRoID0gbWF0Y2hbMV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZXJpdmVkRGF0YVBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViRHJpdmVyQWdlbnQ7XG5leHBvcnQgeyBXZWJEcml2ZXJBZ2VudCwgV0RBX0JVTkRMRV9JRCwgQk9PVFNUUkFQX1BBVEggfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
