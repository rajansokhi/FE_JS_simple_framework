'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeSimctl = require('node-simctl');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

commands.getScreenshot = function callee$0$0() {
  var data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (!(!this.isRealDevice() && this.xcodeVersion.versionFloat >= 8.1)) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getScreenshot)(this.opts.udid));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Cannot make a screenshot using simctl because of "' + context$1$0.t0.message + '". Falling back to WDA API');

      case 10:
        data = undefined;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.proxyCommand('/screenshot', 'GET'));

              case 2:
                data = context$2$0.sent;

                if (_lodash2['default'].isString(data)) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Unable to take screenshot. WDA returned \'' + JSON.stringify(data) + '\'');

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 13:
        return context$1$0.abrupt('return', data);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
};

exports['default'] = commands;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3dCQUE4QixVQUFVOztzQkFDMUIsUUFBUTs7OzswQkFDUSxhQUFhOztzQkFDM0IsV0FBVzs7OztBQUUzQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxhQUFhLEdBQUc7TUFRbkIsSUFBSTs7Ozs7Ozs7Y0FORixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUE7Ozs7Ozt5Q0FDbEQsK0JBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFHNUMsNEJBQUksSUFBSSx3REFBc0QsZUFBSSxPQUFPLGdDQUE2QixDQUFDOzs7QUFFckcsWUFBSTs7eUNBQ0YsNkJBQWMsRUFBRSxFQUFFLElBQUksRUFBRTs7Ozs7aURBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDOzs7QUFBcEQsb0JBQUk7O29CQUNDLG9CQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUM7Ozs7O3NCQUNiLElBQUksS0FBSyxnREFBNkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBSTs7Ozs7OztTQUV2RixDQUFDOzs7NENBQ0ssSUFBSTs7Ozs7OztDQUNaLENBQUM7O3FCQUVhLFFBQVEiLCJmaWxlIjoibGliL2NvbW1hbmRzL3NjcmVlbnNob3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBnZXRTY3JlZW5zaG90IH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIXRoaXMuaXNSZWFsRGV2aWNlKCkgJiYgdGhpcy54Y29kZVZlcnNpb24udmVyc2lvbkZsb2F0ID49IDguMSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGdldFNjcmVlbnNob3QodGhpcy5vcHRzLnVkaWQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCBtYWtlIGEgc2NyZWVuc2hvdCB1c2luZyBzaW1jdGwgYmVjYXVzZSBvZiBcIiR7ZXJyLm1lc3NhZ2V9XCIuIEZhbGxpbmcgYmFjayB0byBXREEgQVBJYCk7XG4gIH1cbiAgbGV0IGRhdGE7XG4gIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMTAsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICBkYXRhID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9zY3JlZW5zaG90JywgJ0dFVCcpO1xuICAgIGlmICghXy5pc1N0cmluZyhkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gdGFrZSBzY3JlZW5zaG90LiBXREEgcmV0dXJuZWQgJyR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9J2ApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
