'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var emuMethods = {};

emuMethods.isEmulatorConnected = function callee$0$0(udid) {
  var emulators, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, emulator;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getConnectedEmulators());

      case 2:
        emulators = context$1$0.sent;

        if (emulators.length) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 5:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 8;
        _iterator = _getIterator(emulators);

      case 10:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 17;
          break;
        }

        emulator = _step.value;

        if (!(emulator.udid === udid)) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', true);

      case 14:
        _iteratorNormalCompletion = true;
        context$1$0.next = 10;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](8);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', false);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 19, 23, 31], [24,, 26, 30]]);
};

emuMethods.fingerprint = function callee$0$0(fingerprintId) {
  var udid = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];
  var level;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!fingerprintId) {
          _loggerJs2['default'].errorAndThrow('Fingerprint id parameter must be defined');
        }

        // the method used only works for API level 23 and above
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        level = context$1$0.sent;

        if (parseInt(level, 10) < 23) {
          _loggerJs2['default'].errorAndThrow('Device API Level must be >= 23. Current Api level \'' + level + '\'');
        }

        context$1$0.t0 = !_lodash2['default'].isUndefined(udid);

        if (!context$1$0.t0) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.isEmulatorConnected(udid));

      case 9:
        context$1$0.t0 = !context$1$0.sent;

      case 10:
        if (!context$1$0.t0) {
          context$1$0.next = 14;
          break;
        }

        _loggerJs2['default'].errorAndThrow('Device \'' + udid + '\' is not available.');
        context$1$0.next = 19;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getConnectedEmulators());

      case 16:
        context$1$0.t1 = context$1$0.sent.length;

        if (!(context$1$0.t1 === 0)) {
          context$1$0.next = 19;
          break;
        }

        _loggerJs2['default'].errorAndThrow('No devices connected');

      case 19:
        if (!udid) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.setDeviceId(udid));

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.adbExec(['emu', 'finger', 'touch', fingerprintId]));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

emuMethods.resetTelnetAuthToken = function callee$0$0() {
  var homeFolderPath, dstPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

        if (homeFolderPath) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].warn('Cannot find the path to user home folder. Ignoring resetting of emulator\'s telnet authentication token');
        return context$1$0.abrupt('return', false);

      case 4:
        dstPath = _path2['default'].resolve(homeFolderPath, '.emulator_console_auth_token');

        _loggerJs2['default'].debug('Overriding ' + dstPath + ' with an empty string to avoid telnet authentication for emulator commands');
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dstPath, ''));

      case 9:
        context$1$0.next = 15;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](6);

        _loggerJs2['default'].warn('Error ' + context$1$0.t0.message + ' while resetting the content of ' + dstPath + '. Ignoring resetting of emulator\'s telnet authentication token');
        return context$1$0.abrupt('return', false);

      case 15:
        return context$1$0.abrupt('return', true);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 11]]);
};

exports['default'] = emuMethods;
module.exports = exports['default'];

// The methods is used to remove telnet auth token
// See http://tools.android.com/recent/emulator2516releasenotes for more details
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hZGItZW11LWNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozt3QkFBZ0IsY0FBYzs7OztzQkFDaEIsUUFBUTs7Ozs2QkFDSCxnQkFBZ0I7O29CQUNsQixNQUFNOzs7O0FBRXZCLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFcEIsVUFBVSxDQUFDLG1CQUFtQixHQUFHLG9CQUFnQixJQUFJO01BQy9DLFNBQVMsa0ZBSUosUUFBUTs7Ozs7O3lDQUpLLElBQUksQ0FBQyxxQkFBcUIsRUFBRTs7O0FBQTlDLGlCQUFTOztZQUNSLFNBQVMsQ0FBQyxNQUFNOzs7Ozs0Q0FDWixLQUFLOzs7Ozs7O2lDQUVPLFNBQVM7Ozs7Ozs7O0FBQXJCLGdCQUFROztjQUNYLFFBQVEsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFBOzs7Ozs0Q0FDakIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQUdSLEtBQUs7Ozs7Ozs7Q0FDYixDQUFDOztBQUVGLFVBQVUsQ0FBQyxXQUFXLEdBQUcsb0JBQWdCLGFBQWE7TUFBRSxJQUFJLHlEQUFHLFNBQVM7TUFNbEUsS0FBSzs7OztBQUxULFlBQUksQ0FBQyxhQUFhLEVBQUU7QUFDbEIsZ0NBQUksYUFBYSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7U0FDL0Q7Ozs7eUNBR2lCLElBQUksQ0FBQyxXQUFXLEVBQUU7OztBQUFoQyxhQUFLOztBQUNULFlBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7QUFDNUIsZ0NBQUksYUFBYSwwREFBdUQsS0FBSyxRQUFJLENBQUM7U0FDbkY7O3lCQUVHLENBQUMsb0JBQUUsV0FBVyxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7eUNBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7Ozs7QUFDaEUsOEJBQUksYUFBYSxlQUFZLElBQUksMEJBQXNCLENBQUM7Ozs7Ozt5Q0FDeEMsSUFBSSxDQUFDLHFCQUFxQixFQUFFOzs7MENBQUUsTUFBTTs7aUNBQUssQ0FBQzs7Ozs7QUFDMUQsOEJBQUksYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUM7OzthQUd4QyxJQUFJOzs7Ozs7eUNBQ0EsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7Ozs7eUNBRXhCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQzs7Ozs7OztDQUM5RCxDQUFDOztBQUVGLFVBQVUsQ0FBQyxvQkFBb0IsR0FBRztNQUcxQixjQUFjLEVBS2QsT0FBTzs7OztBQUxQLHNCQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxBQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxHQUFJLGFBQWEsR0FBRyxNQUFNLENBQUM7O1lBQ3RGLGNBQWM7Ozs7O0FBQ2pCLDhCQUFJLElBQUksQ0FBQyx5R0FBeUcsQ0FBQyxDQUFDOzRDQUM3RyxLQUFLOzs7QUFFUixlQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLGNBQWMsRUFBRSw4QkFBOEIsQ0FBQzs7QUFDNUUsOEJBQUksS0FBSyxpQkFBZSxPQUFPLGdGQUE2RSxDQUFDOzs7eUNBRXJHLGtCQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDOzs7Ozs7Ozs7O0FBRS9CLDhCQUFJLElBQUksWUFBVSxlQUFFLE9BQU8sd0NBQW1DLE9BQU8scUVBQWtFLENBQUM7NENBQ2pJLEtBQUs7Ozs0Q0FFUCxJQUFJOzs7Ozs7O0NBQ1osQ0FBQzs7cUJBRWEsVUFBVSIsImZpbGUiOiJsaWIvdG9vbHMvYWRiLWVtdS1jb21tYW5kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5sZXQgZW11TWV0aG9kcyA9IHt9O1xuXG5lbXVNZXRob2RzLmlzRW11bGF0b3JDb25uZWN0ZWQgPSBhc3luYyBmdW5jdGlvbiAodWRpZCkge1xuICBsZXQgZW11bGF0b3JzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWRFbXVsYXRvcnMoKTtcbiAgaWYgKCFlbXVsYXRvcnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGVtdWxhdG9yIG9mIGVtdWxhdG9ycykge1xuICAgIGlmIChlbXVsYXRvci51ZGlkID09PSB1ZGlkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZW11TWV0aG9kcy5maW5nZXJwcmludCA9IGFzeW5jIGZ1bmN0aW9uIChmaW5nZXJwcmludElkLCB1ZGlkID0gdW5kZWZpbmVkKSB7XG4gIGlmICghZmluZ2VycHJpbnRJZCkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdGaW5nZXJwcmludCBpZCBwYXJhbWV0ZXIgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICAvLyB0aGUgbWV0aG9kIHVzZWQgb25seSB3b3JrcyBmb3IgQVBJIGxldmVsIDIzIGFuZCBhYm92ZVxuICBsZXQgbGV2ZWwgPSBhd2FpdCB0aGlzLmdldEFwaUxldmVsKCk7XG4gIGlmIChwYXJzZUludChsZXZlbCwgMTApIDwgMjMpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRGV2aWNlIEFQSSBMZXZlbCBtdXN0IGJlID49IDIzLiBDdXJyZW50IEFwaSBsZXZlbCAnJHtsZXZlbH0nYCk7XG4gIH1cblxuICBpZiAoIV8uaXNVbmRlZmluZWQodWRpZCkgJiYgIShhd2FpdCB0aGlzLmlzRW11bGF0b3JDb25uZWN0ZWQodWRpZCkpICkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBEZXZpY2UgJyR7dWRpZH0nIGlzIG5vdCBhdmFpbGFibGUuYCk7XG4gIH0gZWxzZSBpZiAoKGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRW11bGF0b3JzKCkpLmxlbmd0aCA9PT0gMCkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdObyBkZXZpY2VzIGNvbm5lY3RlZCcpO1xuICB9XG5cbiAgaWYgKHVkaWQpIHtcbiAgICBhd2FpdCB0aGlzLnNldERldmljZUlkKHVkaWQpO1xuICB9XG4gIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ2VtdScsICdmaW5nZXInLCAndG91Y2gnLCBmaW5nZXJwcmludElkXSk7XG59O1xuXG5lbXVNZXRob2RzLnJlc2V0VGVsbmV0QXV0aFRva2VuID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyBUaGUgbWV0aG9kcyBpcyB1c2VkIHRvIHJlbW92ZSB0ZWxuZXQgYXV0aCB0b2tlblxuICAvLyBTZWUgaHR0cDovL3Rvb2xzLmFuZHJvaWQuY29tL3JlY2VudC9lbXVsYXRvcjI1MTZyZWxlYXNlbm90ZXMgZm9yIG1vcmUgZGV0YWlsc1xuICBjb25zdCBob21lRm9sZGVyUGF0aCA9IHByb2Nlc3MuZW52Wyhwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSA/ICdVU0VSUFJPRklMRScgOiAnSE9NRSddO1xuICBpZiAoIWhvbWVGb2xkZXJQYXRoKSB7XG4gICAgbG9nLndhcm4oJ0Nhbm5vdCBmaW5kIHRoZSBwYXRoIHRvIHVzZXIgaG9tZSBmb2xkZXIuIElnbm9yaW5nIHJlc2V0dGluZyBvZiBlbXVsYXRvclxcJ3MgdGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGRzdFBhdGggPSBwYXRoLnJlc29sdmUoaG9tZUZvbGRlclBhdGgsICcuZW11bGF0b3JfY29uc29sZV9hdXRoX3Rva2VuJyk7XG4gIGxvZy5kZWJ1ZyhgT3ZlcnJpZGluZyAke2RzdFBhdGh9IHdpdGggYW4gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHRlbG5ldCBhdXRoZW50aWNhdGlvbiBmb3IgZW11bGF0b3IgY29tbWFuZHNgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZHN0UGF0aCwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLndhcm4oYEVycm9yICR7ZS5tZXNzYWdlfSB3aGlsZSByZXNldHRpbmcgdGhlIGNvbnRlbnQgb2YgJHtkc3RQYXRofS4gSWdub3JpbmcgcmVzZXR0aW5nIG9mIGVtdWxhdG9yXFwncyB0ZWxuZXQgYXV0aGVudGljYXRpb24gdG9rZW5gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBlbXVNZXRob2RzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
