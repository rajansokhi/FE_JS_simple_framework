'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _libLogcatJs = require('../../lib/logcat.js');

var _libLogcatJs2 = _interopRequireDefault(_libLogcatJs);

var _libLoggerJs = require('../../lib/logger.js');

var _libLoggerJs2 = _interopRequireDefault(_libLoggerJs);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);
var should = _chai2['default'].should();
var apiLevel = '21',
    platformVersion = '4.4.4',
    language = 'en',
    country = 'US',
    locale = 'en-US',
    IME = 'com.android.inputmethod.latin/.LatinIME',
    imeList = 'com.android.inputmethod.latin/.LatinIME:\n  mId=com.android.inputmethod.latin/.LatinIME mSettingsActivityName=com.android\n  mIsDefaultResId=0x7f070000\n  Service:\n    priority=0 preferredOrder=0 match=0x108000 specificIndex=-1 isDefault=false\n    ServiceInfo:\n      name=com.android.inputmethod.latin.LatinIME\n      packageName=com.android.inputmethod.latin\n      labelRes=0x7f0a0037 nonLocalizedLabel=null icon=0x0 banner=0x0\n      enabled=true exported=true processName=com.android.inputmethod.latin\n      permission=android.permission.BIND_INPUT_METHOD\n      flags=0x0',
    psOutput = 'USER     PID   PPID  VSIZE  RSS     WCHAN    PC   NAME\nu0_a101   5078  3129  487404 37044 ffffffff b76ce565 S com.example.android.contactmanager',
    contactManagerPackage = 'com.example.android.contactmanager',
    model = 'Android SDK built for X86_64',
    manufacturer = 'unknown',
    screenSize = '768x1280';

describe('adb commands', function () {
  var adb = new _2['default']();
  var logcat = new _libLogcatJs2['default']({
    adb: adb,
    debug: false,
    debugTrace: false
  });
  describe('shell', function () {
    describe('getApiLevel', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.build.version.sdk']).returns(apiLevel);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getApiLevel());

            case 3:
              context$4$0.t0 = apiLevel;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getPlatformVersion', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.build.version.release']).returns(platformVersion);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getPlatformVersion());

            case 3:
              context$4$0.t0 = platformVersion;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceSysLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.language']).returns(language);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceSysLanguage());

            case 3:
              context$4$0.t0 = language;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setDeviceSysLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.language', language]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setDeviceSysLanguage(language));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceSysCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.country']).returns(country);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceSysCountry());

            case 3:
              context$4$0.t0 = country;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setDeviceSysCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.country', country]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setDeviceSysCountry(country));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceSysLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns(locale);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceSysLocale());

            case 3:
              context$4$0.t0 = locale;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setDeviceSysLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.locale', locale]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setDeviceSysLocale(locale));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceProductLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.language']).returns(language);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceProductLanguage());

            case 3:
              context$4$0.t0 = language;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceProductCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.region']).returns(country);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceProductCountry());

            case 3:
              context$4$0.t0 = country;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getDeviceProductLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale']).returns(locale);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getDeviceProductLocale());

            case 3:
              context$4$0.t0 = locale;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('availableIMEs', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['ime', 'list', '-a']).returns(imeList);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.availableIMEs());

            case 3:
              context$4$0.sent.should.have.length.above(0);

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('enabledIMEs', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['ime', 'list']).returns(imeList);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.enabledIMEs());

            case 3:
              context$4$0.sent.should.have.length.above(0);

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('defaultIME', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      var defaultIME = 'com.android.inputmethod.latin/.LatinIME';
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'secure', 'default_input_method']).returns(defaultIME);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.defaultIME());

            case 3:
              context$4$0.t0 = defaultIME;
              context$4$0.sent.should.equal(context$4$0.t0);

              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('disableIME', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['ime', 'disable', IME]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.disableIME(IME));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('enableIME', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['ime', 'enable', IME]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.enableIME(IME));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('keyevent', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        var keycode, code;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              keycode = '29';
              code = parseInt(keycode, 10);

              mocks.adb.expects("shell").once().withExactArgs(['input', 'keyevent', code]).returns("");
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.keyevent(keycode));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('inputText', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        var text, expectedText;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              text = 'some text';
              expectedText = 'some%stext';

              mocks.adb.expects("shell").once().withExactArgs(['input', 'text', expectedText]).returns("");
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.inputText(text));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('clearTextField', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['input', 'keyevent', '67', '112', '67', '112', '67', '112', '67', '112']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.clearTextField(4));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('lock', (0, _appiumTestSupport.withMocks)({ adb: adb, log: _libLoggerJs2['default'] }, function (mocks) {
      it('should call isScreenLocked, keyevent and errorAndThrow', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isScreenLocked").atLeast(2).returns(false);
              mocks.adb.expects("keyevent").once().withExactArgs(26).returns("");
              mocks.log.expects("errorAndThrow").once().returns("");
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.lock());

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('back', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call keyevent with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("keyevent").once().withExactArgs(4).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.back());

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('goToHome', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call keyevent with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("keyevent").once().withExactArgs(3).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.goToHome());

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe.skip('isScreenLocked', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call keyevent with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("keyevent").once().withExactArgs(3).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.goToHome());

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('isSoftKeyboardPresent', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should return false', function callee$3$0() {
        var _ref, isKeyboardShown, canCloseKeyboard;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['dumpsys', 'input_method']).returns("mInputShown=false");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isSoftKeyboardPresent());

            case 3:
              _ref = context$4$0.sent;
              isKeyboardShown = _ref.isKeyboardShown;
              canCloseKeyboard = _ref.canCloseKeyboard;

              canCloseKeyboard.should.be['false'];
              isKeyboardShown.should.be['false'];
              mocks.adb.verify();

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args and should return true', function callee$3$0() {
        var _ref2, isKeyboardShown, canCloseKeyboard;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['dumpsys', 'input_method']).returns("mInputShown=true mIsInputViewShown=true");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isSoftKeyboardPresent());

            case 3:
              _ref2 = context$4$0.sent;
              isKeyboardShown = _ref2.isKeyboardShown;
              canCloseKeyboard = _ref2.canCloseKeyboard;

              isKeyboardShown.should.be['true'];
              canCloseKeyboard.should.be['true'];
              mocks.adb.verify();

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('isAirplaneModeOn', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should be true', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'airplane_mode_on']).returns("1");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isAirplaneModeOn());

            case 3:
              context$4$0.sent.should.be['true'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args and should be false', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'airplane_mode_on']).returns("0");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isAirplaneModeOn());

            case 3:
              context$4$0.sent.should.be['false'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setAirplaneMode', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'put', 'global', 'airplane_mode_on', 1]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setAirplaneMode(1));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('broadcastAirplaneMode', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', 'android.intent.action.AIRPLANE_MODE', '--ez', 'state', 'true']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.broadcastAirplaneMode(true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('isWifiOn', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should be true', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'wifi_on']).returns("1");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isWifiOn());

            case 3:
              context$4$0.sent.should.be['true'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args and should be false', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'wifi_on']).returns("0");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isWifiOn());

            case 3:
              context$4$0.sent.should.be['false'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setWifiState', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', 'io.appium.settings.wifi', '--es', 'setstatus', 'enable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiState(true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['svc', 'wifi', 'disable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiState(false, true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('isDataOn', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should be true', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'mobile_data']).returns("1");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isDataOn());

            case 3:
              context$4$0.sent.should.be['true'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args and should be false', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['settings', 'get', 'global', 'mobile_data']).returns("0");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.isDataOn());

            case 3:
              context$4$0.sent.should.be['false'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setDataState', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', 'io.appium.settings.data_connection', '--es', 'setstatus', 'disable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setDataState(false));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['svc', 'data', 'enable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setDataState(true, true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setWifiAndData', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args when turning only wifi on for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', 'io.appium.settings.wifi', '--es', 'setstatus', 'enable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ wifi: true }));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args when turning only wifi off for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['svc', 'wifi', 'disable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ wifi: false }, true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args when turning only data on for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['svc', 'data', 'enable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ data: true }, true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args when turning only data off for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', 'io.appium.settings.data_connection', '--es', 'setstatus', 'disable']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ data: false }));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args when turning both wifi and data on for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").twice().returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ wifi: true, data: true }));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args when turning both wifi and data off for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").twice().returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setWifiAndData({ wifi: false, data: false }, true));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('setGeoLocation', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      var location = { longitude: '50.5',
        latitude: '50.1' };

      it('should call shell with correct args for real device', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['am', 'startservice', '-e', 'longitude', location.longitude, '-e', 'latitude', location.latitude, 'io.appium.settings/.LocationService']).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.setGeoLocation(location));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call adb with correct args for emulator', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("resetTelnetAuthToken").once().returns(true);
              mocks.adb.expects("adbExec").once().withExactArgs(['emu', 'geo', 'fix', location.longitude, location.latitude]).returns("");
              // A workaround for https://code.google.com/p/android/issues/detail?id=206180
              mocks.adb.expects("adbExec").once().withExactArgs(['emu', 'geo', 'fix', location.longitude.replace('.', ','), location.latitude.replace('.', ',')]).returns("");
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.setGeoLocation(location, true));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('processExists', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should find process', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs("ps").returns(psOutput);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.processExists(contactManagerPackage));

            case 3:
              context$4$0.sent.should.be['true'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should call shell with correct args and should not find process', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs("ps").returns("foo");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.processExists(contactManagerPackage));

            case 3:
              context$4$0.sent.should.be['false'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('forwardPort', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      var sysPort = 12345,
          devicePort = 54321;
      it('forwardPort should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("adbExec").once().withExactArgs(['forward', 'tcp:' + sysPort, 'tcp:' + devicePort]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.forwardPort(sysPort, devicePort));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('forwardAbstractPort should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("adbExec").once().withExactArgs(['forward', 'tcp:' + sysPort, 'localabstract:' + devicePort]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.forwardAbstractPort(sysPort, devicePort));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('removePortForward should call shell with correct args', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("adbExec").once().withExactArgs(['forward', '--remove', 'tcp:' + sysPort]).returns("");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.removePortForward(sysPort, devicePort));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('ping', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct args and should return true', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(["echo", "ping"]).returns("ping");
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.ping());

            case 3:
              context$4$0.sent.should.be['true'];

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('restart', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call adb in correct order', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("stopLogcat").once().returns("");
              mocks.adb.expects("restartAdb").once().returns("");
              mocks.adb.expects("waitForDevice").once().returns("");
              mocks.adb.expects("startLogcat").once().returns("");
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.restart());

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('stopLogcat', (0, _appiumTestSupport.withMocks)({ logcat: logcat }, function (mocks) {
      it('should call stopCapture', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              adb.logcat = logcat;
              mocks.logcat.expects("stopCapture").once().returns("");
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.stopLogcat());

            case 4:
              mocks.logcat.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getLogcatLogs', (0, _appiumTestSupport.withMocks)({ logcat: logcat }, function (mocks) {
      it('should call getLogs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              adb.logcat = logcat;
              mocks.logcat.expects("getLogs").once().returns("");
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.getLogcatLogs());

            case 4:
              mocks.logcat.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('getPIDsByName', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell and parse pids correctly', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['ps']).returns(psOutput);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.getPIDsByName(contactManagerPackage));

            case 3:
              context$4$0.sent[0].should.equal(5078);

              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('killProcessesByName', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call getPIDsByName and kill process correctly', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("getPIDsByName").once().withExactArgs(contactManagerPackage).returns([5078]);
              mocks.adb.expects("killProcessByPID").once().withExactArgs(5078).returns("");
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.killProcessesByName(contactManagerPackage));

            case 4:
              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('killProcessByPID', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call kill process correctly', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("shell").once().withExactArgs(['kill', 5078]).returns();
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.killProcessByPID(5078));

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('broadcastProcessEnd', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should broadcast process end', function callee$3$0() {
        var intent, processName;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              intent = 'intent', processName = 'processName';

              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', intent]).returns("");
              mocks.adb.expects("processExists").once().withExactArgs(processName).returns(false);
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.broadcastProcessEnd(intent, processName));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('broadcast', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should broadcast intent', function callee$3$0() {
        var intent;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              intent = 'intent';

              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', intent]).returns("");
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.broadcast(intent));

            case 4:
              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('instrument', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it('should call shell with correct arguments', function callee$3$0() {
        var intent;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              intent = 'intent';

              mocks.adb.expects("shell").once().withExactArgs(['am', 'broadcast', '-a', intent]).returns("");
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.broadcast(intent));

            case 4:
              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe('androidCoverage', (0, _appiumTestSupport.withMocks)({ adb: adb, teen_process: teen_process }, function (mocks) {
      it('should call shell with correct arguments', function callee$3$0() {
        var conn, instrumentClass, waitPkg, waitActivity, args;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              adb.executable.defaultArgs = [];
              adb.executable.path = "dummy_adb_path";
              conn = new _events2['default'].EventEmitter();

              conn.start = function () {}; // do nothing
              instrumentClass = 'instrumentClass', waitPkg = 'waitPkg', waitActivity = 'waitActivity';
              args = adb.executable.defaultArgs.concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w']).concat([instrumentClass]);

              mocks.teen_process.expects("SubProcess").once().withExactArgs('dummy_adb_path', args).returns(conn);
              mocks.adb.expects("waitForActivity").once().withExactArgs(waitPkg, waitActivity).returns("");
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap(adb.androidCoverage(instrumentClass, waitPkg, waitActivity));

            case 10:
              mocks.teen_process.verify();
              mocks.adb.verify();

            case 12:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
  });
  describe('device info', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should get device model', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.model']).returns(model);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getModel());

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get device manufacturer', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.manufacturer']).returns(manufacturer);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getManufacturer());

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get device screen size', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['wm', 'size']).returns(screenSize);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getScreenSize());

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('app permission', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    var dumpedOutput = '\n          declared permissions:\n            com.xxx.permission.C2D_MESSAGE: prot=signature, INSTALLED\n            com.xxx.permission.C2D_MESSAGE: prot=signature\n          requested permissions:\n            android.permission.ACCESS_NETWORK_STATE\n            android.permission.WRITE_EXTERNAL_STORAGE\n            android.permission.INTERNET\n            android.permission.READ_CONTACTS\n            android.permission.RECORD_AUDIO\n            android.permission.VIBRATE\n            android.permission.CAMERA\n            android.permission.FLASHLIGHT\n            android.permission.READ_PHONE_STATE\n            android.permission.MODIFY_AUDIO_SETTINGS\n            android.permission.BLUETOOTH\n            android.permission.WAKE_LOCK\n            com.google.android.c2dm.permission.RECEIVE\n            com.xxx.permission.C2D_MESSAGE\n            android.permission.ACCESS_FINE_LOCATION\n            android.permission.READ_EXTERNAL_STORAGE\n            android.permission.RECEIVE_BOOT_COMPLETED\n            .permission.C2D_MESSAGE\n          install permissions:\n            com.google.android.c2dm.permission.RECEIVE: granted=true\n            android.permission.MODIFY_AUDIO_SETTINGS: granted=true\n            android.permission.RECEIVE_BOOT_COMPLETED: granted=true\n            android.permission.BLUETOOTH: granted=true\n            android.permission.INTERNET: granted=true\n            com.xxx.permission.C2D_MESSAGE: granted=true\n            android.permission.FLASHLIGHT: granted=true\n            android.permission.ACCESS_NETWORK_STATE: granted=true\n            android.permission.VIBRATE: granted=true\n            android.permission.WAKE_LOCK: granted=true\n          User 0: ceDataInode=1504712 installed=true hidden=false suspended=false stopped=false notLaunched=false enabled=0\n            gids=[3002, 3003]\n            runtime permissions:\n              android.permission.ACCESS_FINE_LOCATION: granted=true\n              android.permission.READ_EXTERNAL_STORAGE: granted=true\n              android.permission.READ_PHONE_STATE: granted=true\n              android.permission.CAMERA: granted=false, flags=[ USER_SET ]\n              android.permission.WRITE_EXTERNAL_STORAGE: granted=true\n              android.permission.RECORD_AUDIO: granted=true\n              android.permission.READ_CONTACTS: granted=false, flags=[ USER_SET ]\n\n\n      Dexopt state:\n        [com.xxx]\n          Instruction Set: arm\n            path: /data/app/com.xxx-1/base.apk\n            status: /data/app/com.xxxa-1/oat/arm/base.odex [compilation_filter=interpret-only, status=kOatUpToDate]\n\n\n      Compiler stats:\n        [com.xxx]\n           base.apk - 8264\n\n    DUMP OF SERVICE activity:\n      ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents)\n        (nothing)';

    it('should grant requested permission', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withArgs(['pm', 'grant', 'io.appium.android.apis', 'android.permission.READ_EXTERNAL_STORAGE']);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.grantPermission('io.appium.android.apis', 'android.permission.READ_EXTERNAL_STORAGE'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should revoke requested permission', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withArgs(['pm', 'revoke', 'io.appium.android.apis', 'android.permission.READ_EXTERNAL_STORAGE']);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.revokePermission('io.appium.android.apis', 'android.permission.READ_EXTERNAL_STORAGE'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly list requested permissions', function callee$2$0() {
      var result, _arr, _i, perm;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().returns(dumpedOutput);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getReqPermissions('io.appium.android'));

          case 3:
            result = context$3$0.sent;
            _arr = ['android.permission.ACCESS_NETWORK_STATE', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.INTERNET', 'android.permission.READ_CONTACTS', 'android.permission.RECORD_AUDIO', 'android.permission.VIBRATE', 'android.permission.CAMERA', 'android.permission.FLASHLIGHT', 'android.permission.READ_PHONE_STATE', 'android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.BLUETOOTH', 'android.permission.WAKE_LOCK', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.RECEIVE_BOOT_COMPLETED'];

            for (_i = 0; _i < _arr.length; _i++) {
              perm = _arr[_i];

              result.should.include(perm);
            }

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly list granted permissions', function callee$2$0() {
      var result, _arr2, _i2, perm, _arr3, _i3;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().returns(dumpedOutput);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getGrantedPermissions('io.appium.android'));

          case 3:
            result = context$3$0.sent;
            _arr2 = ['android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.BLUETOOTH', 'android.permission.INTERNET', 'android.permission.FLASHLIGHT', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.VIBRATE', 'android.permission.WAKE_LOCK', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.READ_PHONE_STATE', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.RECORD_AUDIO'];

            for (_i2 = 0; _i2 < _arr2.length; _i2++) {
              perm = _arr2[_i2];

              result.should.include(perm);
            }
            _arr3 = ['android.permission.READ_CONTACTS', 'android.permission.CAMERA'];
            for (_i3 = 0; _i3 < _arr3.length; _i3++) {
              perm = _arr3[_i3];

              result.should.not.include(perm);
            }

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly list denied permissions', function callee$2$0() {
      var result, _arr4, _i4, perm, _arr5, _i5;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().returns(dumpedOutput);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getDeniedPermissions('io.appium.android'));

          case 3:
            result = context$3$0.sent;
            _arr4 = ['android.permission.MODIFY_AUDIO_SETTINGS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.BLUETOOTH', 'android.permission.INTERNET', 'android.permission.FLASHLIGHT', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.VIBRATE', 'android.permission.WAKE_LOCK', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.READ_PHONE_STATE', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.RECORD_AUDIO'];

            for (_i4 = 0; _i4 < _arr4.length; _i4++) {
              perm = _arr4[_i4];

              result.should.not.include(perm);
            }
            _arr5 = ['android.permission.READ_CONTACTS', 'android.permission.CAMERA'];
            for (_i5 = 0; _i5 < _arr5.length; _i5++) {
              perm = _arr5[_i5];

              result.should.include(perm);
            }

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('sendTelnetCommand', (0, _appiumTestSupport.withMocks)({ adb: adb, net: _net2['default'] }, function (mocks) {
    it('should call shell with correct args', function callee$2$0() {
      var port, conn, commands, p;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            port = 54321;
            conn = new _events2['default'].EventEmitter();
            commands = [];

            conn.write = function (command) {
              commands.push(command);
            };
            mocks.adb.expects("getEmulatorPort").once().withExactArgs().returns(port);
            mocks.net.expects("createConnection").once().withExactArgs(port, 'localhost').returns(conn);
            p = adb.sendTelnetCommand('avd name');

            setTimeout(function () {
              conn.emit('connect');
              conn.emit('data', 'OK');
              conn.emit('data', 'OK');
              conn.emit('close');
            }, 0);
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(p);

          case 10:
            commands[0].should.equal("avd name\n");
            commands[1].should.equal("quit\n");
            mocks.adb.verify();
            mocks.net.verify();

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return the last line of the output only', function callee$2$0() {
      var port, conn, commands, expected, p, actual;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            port = 54321;
            conn = new _events2['default'].EventEmitter();
            commands = [];
            expected = "desired_command_output";

            conn.write = function (command) {
              commands.push(command);
            };
            mocks.adb.expects("getEmulatorPort").once().withExactArgs().returns(port);
            mocks.net.expects("createConnection").once().withExactArgs(port, 'localhost').returns(conn);
            p = adb.sendTelnetCommand('avd name');

            setTimeout(function () {
              conn.emit('connect');
              conn.emit('data', 'OK');
              conn.emit('data', 'OK\nunwanted_echo_output\n' + expected);
              conn.emit('close');
            }, 0);
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(p);

          case 11:
            actual = context$3$0.sent;

            actual.should.equal(expected);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  it('isValidClass should correctly validate class names', function () {
    adb.isValidClass('some.package/some.package.Activity').index.should.equal(0);
    should.not.exist(adb.isValidClass('illegalPackage#/adsasd'));
  });
  it('getAdbPath should correctly return adbPath', function () {
    adb.getAdbPath().should.equal(adb.executable.path);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
