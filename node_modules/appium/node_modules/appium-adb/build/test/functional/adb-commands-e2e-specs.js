'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libHelpersJs = require('../../lib/helpers.js');

var _setup = require('./setup');

_chai2['default'].use(_chaiAsPromised2['default']);
var expect = _chai2['default'].expect;

// change according to CI
var IME = 'com.example.android.softkeyboard/.SoftKeyboard',
    defaultIMEs = ['com.android.inputmethod.latin/.LatinIME', 'io.appium.android.ime/.UnicodeIME'],
    contactManagerPath = _path2['default'].resolve(_libHelpersJs.rootDir, 'test', 'fixtures', 'ContactManager.apk'),
    pkg = 'com.example.android.contactmanager',
    activity = 'ContactManager';

describe('adb commands', function () {
  var _this = this;

  var adb = undefined;
  this.timeout(60000);
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_2['default'].createADB());

        case 2:
          adb = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getApiLevel should get correct api level', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getApiLevel());

        case 2:
          context$2$0.t0 = _setup.apiLevel;
          context$2$0.sent.should.equal(context$2$0.t0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getPlatformVersion should get correct platform version', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getPlatformVersion());

        case 2:
          context$2$0.t0 = _setup.platformVersion;
          context$2$0.sent.should.include(context$2$0.t0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('availableIMEs should get list of available IMEs', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.availableIMEs());

        case 2:
          context$2$0.sent.should.have.length.above(0);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('enabledIMEs should get list of enabled IMEs', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.enabledIMEs());

        case 2:
          context$2$0.sent.should.have.length.above(0);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('defaultIME should get default IME', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t0 = defaultIMEs.should;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.defaultIME());

        case 3:
          context$2$0.t1 = context$2$0.sent;
          context$2$0.t0.include.call(context$2$0.t0, context$2$0.t1);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('enableIME and disableIME should enable and disble IME', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.disableIME(IME));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.enabledIMEs());

        case 4:
          context$2$0.t0 = IME;
          context$2$0.sent.should.not.include(context$2$0.t0);
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(adb.enableIME(IME));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(adb.enabledIMEs());

        case 10:
          context$2$0.t1 = IME;
          context$2$0.sent.should.include(context$2$0.t1);
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(adb.enabledIMEs());

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('processExists should be able to find ui process', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.processExists('com.android.systemui'));

        case 2:
          context$2$0.sent.should.be['true'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('ping should return true', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.ping());

        case 2:
          context$2$0.sent.should.be['true'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getPIDsByName should return pids', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getPIDsByName('m.android.phone'));

        case 2:
          context$2$0.sent.should.have.length.above(0);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('killProcessesByName should kill process', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.startApp({ pkg: pkg, activity: activity }));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.killProcessesByName(pkg));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(adb.getPIDsByName(pkg));

        case 8:
          context$2$0.sent.should.have.length(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('killProcessByPID should kill process', function callee$1$0() {
    var pids;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.startApp({ pkg: pkg, activity: activity }));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.getPIDsByName(pkg));

        case 6:
          pids = context$2$0.sent;

          pids.should.have.length.above(0);
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(adb.killProcessByPID(pids[0]));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(adb.getPIDsByName(pkg));

        case 12:
          context$2$0.sent.length.should.equal(0);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should get device language and country', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(parseInt(_setup.apiLevel, 10) >= 23)) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.skip());

        case 2:
          context$2$0.t0 = ['en', 'fr'].should;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(adb.getDeviceSysLanguage());

        case 5:
          context$2$0.t1 = context$2$0.sent;
          context$2$0.t0.contain.call(context$2$0.t0, context$2$0.t1);
          context$2$0.t2 = ['US', 'EN_US', 'EN', 'FR'].should;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(adb.getDeviceSysCountry());

        case 10:
          context$2$0.t3 = context$2$0.sent;
          context$2$0.t2.contain.call(context$2$0.t2, context$2$0.t3);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should set device language and country', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(parseInt(_setup.apiLevel, 10) >= 23)) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.skip());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.setDeviceSysLanguage('fr'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.setDeviceSysCountry('fr'));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(adb.reboot());

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(adb.getDeviceSysLanguage().should.eventually.equal('fr'));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(adb.getDeviceSysCountry().should.eventually.equal('FR'));

        case 12:
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(adb.setDeviceSysLanguage('en'));

        case 14:
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(adb.setDeviceSysCountry('us'));

        case 16:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should get device locale', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(parseInt(_setup.apiLevel, 10) < 23)) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.skip());

        case 2:
          context$2$0.t0 = ['us'].should;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(adb.getDeviceLocale());

        case 5:
          context$2$0.t1 = context$2$0.sent;
          context$2$0.t0.contain.call(context$2$0.t0, context$2$0.t1);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should forward the port', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.forwardPort(4724, 4724));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should remove forwarded port', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.forwardPort(8200, 6790));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.adbExec(['forward', '--list']));

        case 4:
          context$2$0.sent.should.contain('tcp:8200');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(adb.removePortForward(8200));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(adb.adbExec(['forward', '--list']));

        case 9:
          context$2$0.sent.should.not.contain('tcp:8200');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start logcat from adb', function callee$1$0() {
    var logs;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.startLogcat());

        case 2:
          logs = adb.logcat.getLogs();

          logs.should.have.length.above(0);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.stopLogcat());

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should get model', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getModel());

        case 2:
          context$2$0.sent.should.not.be['null'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should get manufacturer', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getManufacturer());

        case 2:
          context$2$0.sent.should.not.be['null'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should get screen size', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getScreenSize());

        case 2:
          context$2$0.sent.should.not.be['null'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  describe('app permissions', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this2 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          before(function callee$2$0() {
            var deviceApiLevel, isInstalled;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.getApiLevel());

                case 2:
                  deviceApiLevel = context$3$0.sent;

                  if (deviceApiLevel < 23) {
                    //test should skip if the device API < 23
                    this.skip();
                  }
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(adb.isAppInstalled('io.appium.android.apis'));

                case 6:
                  isInstalled = context$3$0.sent;

                  if (!isInstalled) {
                    context$3$0.next = 10;
                    break;
                  }

                  context$3$0.next = 10;
                  return _regeneratorRuntime.awrap(adb.uninstallApk('io.appium.android.apis'));

                case 10:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
          it('should install and grant all permission', function callee$2$0() {
            var apiDemos, requestedPermissions;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  apiDemos = _path2['default'].resolve(_libHelpersJs.rootDir, 'test', 'fixtures', 'ApiDemos-debug.apk');
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap(adb.install(apiDemos));

                case 3:
                  context$3$0.next = 5;
                  return _regeneratorRuntime.awrap(adb.isAppInstalled('io.appium.android.apis'));

                case 5:
                  context$3$0.sent.should.be['true'];
                  context$3$0.next = 8;
                  return _regeneratorRuntime.awrap(adb.grantAllPermissions('io.appium.android.apis'));

                case 8:
                  context$3$0.next = 10;
                  return _regeneratorRuntime.awrap(adb.getReqPermissions('io.appium.android.apis'));

                case 10:
                  requestedPermissions = context$3$0.sent;
                  context$3$0.next = 13;
                  return _regeneratorRuntime.awrap(adb.getGrantedPermissions('io.appium.android.apis'));

                case 13:
                  context$3$0.t0 = context$3$0.sent;
                  context$3$0.t1 = requestedPermissions;
                  expect(context$3$0.t0).to.have.members(context$3$0.t1);

                case 16:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          });
          it('should revoke permission', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.revokePermission('io.appium.android.apis', 'android.permission.RECEIVE_SMS'));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.getGrantedPermissions('io.appium.android.apis'));

                case 4:
                  context$3$0.t0 = context$3$0.sent;
                  context$3$0.t1 = ['android.permission.RECEIVE_SMS'];
                  expect(context$3$0.t0).to.not.have.members(context$3$0.t1);

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          });
          it('should grant permission', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.grantPermission('io.appium.android.apis', 'android.permission.RECEIVE_SMS'));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.getGrantedPermissions('io.appium.android.apis'));

                case 4:
                  context$3$0.t0 = context$3$0.sent;
                  context$3$0.t1 = ['android.permission.RECEIVE_SMS'];
                  expect(context$3$0.t0).to.include.members(context$3$0.t1);

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          });

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// cleanup
//# sourceMappingURL=data:application/json;charset=utf8;base64,
