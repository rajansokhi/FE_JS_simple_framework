'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libHelpersJs = require('../../lib/helpers.js');

var _asyncbox = require('asyncbox');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('apk utils', function () {
  var _this = this;

  var adb = undefined;
  var contactManagerPath = _path2['default'].resolve(_libHelpersJs.rootDir, 'test', 'fixtures', 'ContactManager.apk');
  var deviceTempPath = '/data/local/tmp/';
  var assertPackageAndActivity = function assertPackageAndActivity() {
    var _ref, appPackage, appActivity;

    return _regeneratorRuntime.async(function assertPackageAndActivity$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

        case 2:
          _ref = context$2$0.sent;
          appPackage = _ref.appPackage;
          appActivity = _ref.appActivity;

          appPackage.should.equal('com.example.android.contactmanager');
          appActivity.should.equal('.ContactManager');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  this.timeout(60000);
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_2['default'].createADB());

        case 2:
          adb = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should be able to check status of third party app', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.isAppInstalled('com.android.phone'));

        case 2:
          context$2$0.sent.should.be['true'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should be able to install/remove app and detect its status', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.isAppInstalled('foo'));

        case 2:
          context$2$0.sent.should.be['false'];
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(adb.isAppInstalled('com.example.android.contactmanager'));

        case 7:
          context$2$0.sent.should.be['true'];
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(adb.uninstallApk('com.example.android.contactmanager'));

        case 10:
          context$2$0.sent.should.be['true'];
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(adb.isAppInstalled('com.example.android.contactmanager'));

        case 13:
          context$2$0.sent.should.be['false'];
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(adb.uninstallApk('com.example.android.contactmanager'));

        case 16:
          context$2$0.sent.should.be['false'];
          context$2$0.next = 19;
          return _regeneratorRuntime.awrap(adb.rimraf(deviceTempPath + 'ContactManager.apk'));

        case 19:
          context$2$0.next = 21;
          return _regeneratorRuntime.awrap(adb.push(contactManagerPath, deviceTempPath));

        case 21:
          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(adb.installFromDevicePath(deviceTempPath + 'ContactManager.apk'));

        case 23:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  describe('startUri', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this3 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should be able to start a uri', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              var _this2 = this;

              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.goToHome());

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

                case 4:
                  res = context$3$0.sent;

                  res.appPackage.should.not.equal('com.android.contacts');
                  context$3$0.next = 8;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 8:
                  context$3$0.next = 10;
                  return _regeneratorRuntime.awrap(adb.startUri('content://contacts/people', 'com.android.contacts'));

                case 10:
                  context$3$0.next = 12;
                  return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 500, function callee$3$0() {
                    var focusRe1, focusRe2;
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          context$4$0.next = 2;
                          return _regeneratorRuntime.awrap(adb.shell(['dumpsys', 'window', 'windows']));

                        case 2:
                          res = context$4$0.sent;
                          focusRe1 = '(mCurrentFocus.+\\.PeopleActivity)';
                          focusRe2 = '(mFocusedApp.+\\.PeopleActivity)';

                          res.should.match(new RegExp(focusRe1 + '|' + focusRe2));

                        case 6:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, _this2);
                  }));

                case 12:
                  context$3$0.next = 14;
                  return _regeneratorRuntime.awrap(adb.goToHome());

                case 14:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this3);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  describe('startApp', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this4 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should be able to start', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager' }));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(assertPackageAndActivity());

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should throw error for wrong activity', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManage' }).should.eventually.be.rejectedWith('Activity'));

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should throw error for wrong wait activity', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager',
                    waitActivity: 'foo',
                    waitDuration: 1000 }).should.eventually.be.rejectedWith('foo'));

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should start activity with wait activity', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager',
                    waitActivity: '.ContactManager' }));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(assertPackageAndActivity());

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should start activity when wait activity is a wildcard', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager',
                    waitActivity: '*' }));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(assertPackageAndActivity());

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should start activity when wait activity contains a wildcard', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager',
                    waitActivity: '*.ContactManager' }));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(assertPackageAndActivity());

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should throw error for wrong activity when wait activity contains a wildcard', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'SuperManager',
                    waitActivity: '*.ContactManager' }).should.eventually.be.rejectedWith('Activity'));

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });
          it('should throw error for wrong wait activity which contains wildcard', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
                    activity: 'ContactManager',
                    waitActivity: '*.SuperManager' }).should.eventually.be.rejectedWith('SuperManager'));

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this4);
          });

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getFocusedPackageAndActivity should be able get package and activity', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.install(contactManagerPath));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.startApp({ pkg: 'com.example.android.contactmanager',
            activity: 'ContactManager' }));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(assertPackageAndActivity());

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('extractStringsFromApk should get strings for default language', function callee$1$0() {
    var _ref2, apkStrings;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.extractStringsFromApk(contactManagerPath, null, '/tmp'));

        case 2:
          _ref2 = context$2$0.sent;
          apkStrings = _ref2.apkStrings;

          apkStrings.save.should.equal('Save');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// depending on apilevel, app might show up as active in one of these
// two dumpsys output formats
//# sourceMappingURL=data:application/json;charset=utf8;base64,
